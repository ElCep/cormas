CMAgentLocation subclass: #CMECECForager	instanceVariableNames: 'energy'	classVariableNames: ''	poolDictionaries: ''	category: 'Cormas-Model-ECEC'!!CMECECForager methodsFor: 'accessing' stamp: ' 19/3/15 20:02'!energy: anObject	"Setter accessor of attribute energy "		energy = anObject ifTrue: [^nil].	"for optimization"	energy := anObject.	self changed! !!CMECECForager methodsFor: 'info' stamp: ' 19/3/15 20:02'!info_energy	"return a String "		^self energy rounded printString! !!CMECECForager methodsFor: 'testing' stamp: ' 19/3/15 20:02'!isEnergyHigh	"Tests if energy is upper than the fertilityThreshold (100), in order to reproduce"		^self energy >= self class fertilityThreshold! !!CMECECForager methodsFor: 'testing' stamp: ' 19/3/15 20:02'!isEnergyTooLow	"Tests if energy is 0 or less, so that the forager will die"		^self energy <= 0! !!CMECECForager methodsFor: 'probes' stamp: 'nbecu 6/3/2015 11:55'!energy	"Getter accessor with default value = 50 "	<probes>	^energy ifNil: [energy := 50]! !!CMECECForager methodsFor: 'control' stamp: 'nbecu 6/2/2015 23:05'!step	self consumeEnergy.	self move.	self eat.	self isEnergyHigh ifTrue: [self reproduce].	self isEnergyTooLow ifTrue:[self die]! !!CMECECForager methodsFor: 'biology' stamp: ' 19/3/15 20:02'!die	"no commente... 	set dead attribute to true"		self dead: true! !!CMECECForager methodsFor: 'biology' stamp: ' 19/3/15 20:02'!reproduce	"The forager reproduces asexually, creating an offspring with the same heritable traits as itself (e.g., feeding strategy). At the same time the parent's energy is reduced by the offspring's initial energy (50).  Newborn offspring occupies the nearest free place to its parent. "		| newForager freePlace |	freePlace := self nearestEmptyLocationWithinRadius: 1.	freePlace ifNil: [^nil].	newForager := self newEntity: self class.	self energy: self energy - newForager energy.	newForager moveTo: freePlace! !!CMECECForager methodsFor: 'biology' stamp: ' 19/3/15 20:02'!consumeEnergy	"the forager burns a quantity of energy equivalent to the catabolicRate (-2 per time step)"		self energy: self energy - self class catabolicRate! !!CMECECForager methodsFor: 'biology' stamp: ' 19/3/15 20:02'!eat	"The forager eats a quatity of biomass of its current location. The quantity depends on the harvestRate: a proportion of biomass (50% or 99% according to forager type)"		| qty |	qty := self patch biomass * self class harvestRate.	self energy: self energy + qty.	self patch biomass: self patch biomass - qty! !!CMECECForager methodsFor: 'biology' stamp: ' 19/3/15 20:02'!move	"The Forager examines its current location and around. From those not occupied, he chooses the one containing the plant with the highest energy. If the chosen plant would yield enough food to meet their catabolic rate (2 units), he moves there. If not, he moves instead to a randomly chosen adjacent free place (not occupied by another forager)"		| goodCells |	goodCells := self patch neighbourhoodAndSelf		select:			[:cell | cell biomass > self class catabolicRate and: [cell noOccupant]].	goodCells isEmpty		ifTrue: [self randomWalkConstrainedBy: [:c | c noOccupant]]		ifFalse:			[self				moveTo:					(goodCells asSortedCollection: [:c1 :c2 | c1 biomass > c2 biomass]) first]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CMECECForager class	instanceVariableNames: 'fertilityThreshold catabolicRate harvestRate'!!CMECECForager class methodsFor: 'accessing' stamp: ' 19/3/15 20:02'!fertilityThreshold	"Getter accessor with default value = 100 "		^fertilityThreshold ifNil: [fertilityThreshold := 100]! !!CMECECForager class methodsFor: 'accessing' stamp: ' 19/3/15 20:02'!harvestRate: anObject	"Setter accessor of attribute harvestRate "		harvestRate := anObject! !!CMECECForager class methodsFor: 'accessing' stamp: ' 19/3/15 20:02'!catabolicRate	"Getter accessor with default value = 2 "		^catabolicRate ifNil: [catabolicRate := 2]! !!CMECECForager class methodsFor: 'accessing' stamp: ' 19/3/15 20:02'!catabolicRate: anObject	"Setter accessor of attribute catabolicRate "		catabolicRate := anObject! !!CMECECForager class methodsFor: 'accessing' stamp: ' 19/3/15 20:02'!harvestRate	"Getter accessor without default value "		^harvestRate! !!CMECECForager class methodsFor: 'accessing' stamp: ' 19/3/15 20:02'!fertilityThreshold: anObject	"Setter accessor of attribute fertilityThreshold "		fertilityThreshold := anObject! !!CMECECForager class methodsFor: 'default' stamp: 'nbecu 6/3/2015 11:50'!defaultProbes^self probes! !!CMECECForager class methodsFor: 'testing' stamp: ' 19/3/15 20:02'!isAbstract		^true! !!CMECECForager class methodsFor: 'pov symbols' stamp: ' 19/3/15 20:02'!VectorialPOV_Forager	"Returns an array containing the settings of a Situated entity vectorial pov symbol in the following order:(color red) (color green) (color blue) (lineColor red) (lineColor green) (lineColor blue) lineWidth sizeratio position (array of outline vertices)"		^#(0.833354 0.833354 0.833354 0.0 0.0 0.0 1 0.6 #center #(0 #@- 17 15 #@- 9 15 #@ 9 0 #@ 17 -15 #@ 9 -15 #@- 9 0 #@- 17))! !!CMECECForager class methodsFor: '- default value' stamp: ' 19/3/15 20:02'!fertilityThreshold_default	"Return the default value of fertilityThreshold attribute"		^100! !!CMECECForager class methodsFor: '- default value' stamp: ' 19/3/15 20:02'!energy_default	"Return the default value of energy attribute"		^50! !!CMECECForager class methodsFor: '- default value' stamp: ' 19/3/15 20:02'!harvestRate_default	"Return the default value of harvestRate attribute"		^nil! !!CMECECForager class methodsFor: '- default value' stamp: ' 19/3/15 20:02'!catabolicRate_default	"Return the default value of catabolicRate attribute"		^2! !CormasModel subclass: #CMECECModel	instanceVariableNames: 'restrainedInitialNumber unrestrainedInitialNumber theCMECECRestraineds theCMECECUnrestraineds theCMECECVegetationUnits theRestraineds'	classVariableNames: ''	poolDictionaries: ''	category: 'Cormas-Model-ECEC'!!CMECECModel methodsFor: 'control' stamp: 'SergeStinckwich 4/3/2016 15:15'!step: t	"main step: activation of all the plants (Resource dynamics), then activation of the foragers (Agents dynamics)"	"Resource dynamics   (because the dynamics of the plants are independants, the activation is not mixted)"		self stepEntities: self theCMECECVegetationUnits.	"Agents dynamics    (because the agents may compete for plant access, the activation is randomly mixted)"	self askRandom: CMECECForager toDo: #step.! !!CMECECModel methodsFor: 'init' stamp: 'SergeStinckwich 5/24/2015 16:54'!homogeneousEnv	"initialize an homogeneous space (from poor.env file) with randomly located foragers"	self spaceModel loadEnvironmentFromFile: 'poor.env'.	self initAgents! !!CMECECModel methodsFor: 'init' stamp: ' 26/3/15 08:27'!noAgent	"initialize the space (from poor.env file) without agent"		self spaceModel loadEnvironmentFromFile: 'poor.env'! !!CMECECModel methodsFor: 'init' stamp: ' 26/3/15 08:27'!fragmentedEnv	"initialize an fragmented space (from fragmented.env file) with randomly located foragers"		self spaceModel loadEnvironmentFromFile: 'fragmented.env'.	self initAgents! !!CMECECModel methodsFor: 'probes' stamp: 'NickPapoulias 9/19/2016 16:09'!restrainedSize	"return the current population size of the Restrained foragers"	<probes>	^ self theCMECECRestraineds size! !!CMECECModel methodsFor: 'probes' stamp: 'SergeStinckwich 4/3/2016 15:14'!unrestrainedSize	"return the current population size of the Unrestrained foragers"	<probes>	^ self theCMECECUnrestraineds size! !!CMECECModel methodsFor: 'probes' stamp: 'SergeStinckwich 4/3/2016 15:15'!vegetationBiomass	"return the data (a number) to be plotted as the total Biomass of the vegetation"	<probes>	^ self theCMECECVegetationUnits inject: 0 into: [ :i :j | i + j biomass ]! !!CMECECModel methodsFor: 'instance-creation' stamp: 'SergeStinckwich 4/3/2016 15:15'!homogeneousEnv2	"initialize an homogeneous space (27x27, random biomass) with randomly located foragers"		self spaceModel initializeRegularX: 27 Y: 27 shape: #squared nbNeighbours:			#eight boundaries: #toroidal.	self theCMECECVegetationUnits do: [:cell | cell initRandomBiomass].	"or: self initCells: #initRandomBiomass."	self initAgents! !!CMECECModel methodsFor: 'instance-creation' stamp: 'SergeStinckwich 4/3/2016 15:12'!initAgents	"initialize 10 foragers of each type and move then randomly on a free cell"		self		createN: self restrainedInitialNumber		randomlyLocatedAloneEntities: CMECECRestrained.	self		createN: self unrestrainedInitialNumber		randomlyLocatedAloneEntities: CMECECUnrestrained! !!CMECECModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:13'!theCMECECForagers	"Returns a collection of all the instances of aClass (and sub classes) collected by cormasModel"		^self allTheEntities: CMECECForager! !!CMECECModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:16'!theCMECECVegetationUnits		^theCMECECVegetationUnits ifNil: [theCMECECVegetationUnits := OrderedCollection new]! !!CMECECModel methodsFor: 'accessing' stamp: ' 26/3/15 08:27'!unrestrainedInitialNumber: anObject	"Setter accessor of attribute unrestrainedInitialNumber "		unrestrainedInitialNumber := anObject! !!CMECECModel methodsFor: 'accessing' stamp: 'NickPapoulias 9/19/2016 16:09'!theCMECECRestraineds^theRestraineds ifNil:[theRestraineds := IndexedSet new]! !!CMECECModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:15'!theCMECECUnrestraineds: aCollection	theCMECECUnrestraineds := aCollection! !!CMECECModel methodsFor: 'accessing' stamp: ' 26/3/15 08:27'!restrainedInitialNumber: anObject	"Setter accessor of attribute restrainedInitialNumber "		restrainedInitialNumber := anObject! !!CMECECModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:14'!theCMECECRestraineds: aCollection	theCMECECRestraineds := aCollection! !!CMECECModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:16'!theCMECECVegetationUnits: aCollection	theCMECECVegetationUnits := aCollection! !!CMECECModel methodsFor: 'accessing' stamp: ' 26/3/15 08:27'!restrainedInitialNumber	"Getter accessor with default value = 10.	!!!! Code automaticaly generated by Cormas !!!!  "		^restrainedInitialNumber ifNil: [restrainedInitialNumber := 10]! !!CMECECModel methodsFor: 'accessing' stamp: ' 26/3/15 08:27'!unrestrainedInitialNumber	"Getter accessor with default value = 10.	!!!! Code automaticaly generated by Cormas !!!!  "		^unrestrainedInitialNumber ifNil: [unrestrainedInitialNumber := 10]! !!CMECECModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:15'!theCMECECUnrestraineds		^theCMECECUnrestraineds ifNil: [theCMECECUnrestraineds := OrderedCollection new]! !!CMECECModel methodsFor: 'description' stamp: 'NickPapoulias 9/19/2016 16:40'!initSimulation	super initSimulation.	self runStep.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CMECECModel class	instanceVariableNames: ''!!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!creationDate		^'May 7, 2012'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!comments		^'This model is the replication of the ECEC model by Pepper and Smuth: Evolution of Cooperation in an Ecological Context.'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!version		^'ECEC.pcl'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!lastUpdate		^'November 15, 2013'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!currentDeveloperName		^'L√©on Iladubobo'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!vwCompatibleVersion		^'7.6'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!emails		^'iladubobo@yahoo.com'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!authors		^'L√©on Iladubobo'! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!cormasCompatibleVersion		^#(2013 11 15 17 38 0)! !!CMECECModel class methodsFor: 'description' stamp: ' 26/3/15 08:27'!versionComments		^'  --------------------- ECEC_tutorial.pcl --------------------- Date: 2012.8.21 - 8:58:183 initializaton methods *** Developer: L√©on Iladubobo *** --------------------- ECEC_tutorial.pcl --------------------- Date: 2012.8.21 - 8:58:18First full version *** Developer: L√©on Iladubobo *** --------------------- ECEC_tutorial.pcl --------------------- Date: 2012.8.21 - 17:22:10First version with no bug !! *** Developer: L√©on Iladubobo *** --------------------- ECEC_tutorial.pcl --------------------- Date: 2012.8.23 - 12:53:54Probe curves with predefined colors *** Developer: L√©on Iladubobo *** --------------------- ECEC_tutorial.pcl --------------------- Date: 2012.8.23 - 12:53:54with activity diagram *** Developer: L√©on Iladubobo *** --------------------- ECEC_tutorial.pcl --------------------- Date: 2012.8.23 - 12:53:54Modified Activity diagram for the Restrained foragers *** Developer: L√©on Iladubobo ***'! !!CMECECModel class methodsFor: '- probes' stamp: 'HernanMoralesDurand 12/30/2017 13:00'!colorOfProbe_unrestrainedSize		^ Color red: 0.839458 green: 0.0 blue: 0.0! !!CMECECModel class methodsFor: '- probes' stamp: 'HernanMoralesDurand 12/30/2017 13:00'!colorOfProbe_restrainedSize		^ Color red: 0.104993 green: 0.104993 blue: 0.839458! !!CMECECModel class methodsFor: '- probes' stamp: 'HernanMoralesDurand 12/30/2017 13:00'!colorOfProbe_vegetationBiomass		^ Color red: 0.0 green: 0.839458 blue: 0.0! !!CMECECModel class methodsFor: 'as yet unclassified' stamp: 'JigyasaGrover 1/5/2017 16:48'!visualize		| data g ds b c |	data := #(20 30 50 100).		"v := RTView new."		c := RTComposer new.		"First visualization"		g := RTGrapher new.	g extent: 200 @ 200.	g view: c view.	"g view: v view."		ds := RTData new.	ds interaction popup.	ds barShape color: Color blue.	ds points: data.		g add: ds.	g axisX noTick; noLabel.	g build.	"v group: #graph."	c group: #graph.	"Second visualization"	b := RTPieBuilder new.	b view: c view.	"b view: v view."	b interaction popup.	b objects: data.	b slice: #yourself.	b labeled.	b build.	"v group: #pie."   c group: #pie.	"Layouting"    c move: #graph onTheLeftOf: #pie.	RTMetricNormalizer new view: c view;                 objects: data;                 distinctColor.		c open.		"v openTitled: 'Data Visualization'."! !!CMECECModel class methodsFor: 'as yet unclassified' stamp: 'JigyasaGrover 1/5/2017 17:09'!visualize: es		| data g ds b c |		data := #(20 30 50 100).		"v := RTView new."		c := RTComposer new.		"First visualization"		g := RTGrapher new.	g extent: 200 @ 200.	g view: c view.	"g view: v view."		ds := RTData new.	ds interaction popup.	ds barShape color: Color blue.	ds points: data.		g add: ds.	g axisX noTick; noLabel.	g build.	"v group: #graph."	c group: #graph.	"Second visualization"	b := RTPieBuilder new.	b view: c view.	"b view: v view."	b interaction popup.	b objects: data.	b slice: #yourself.	b labeled.	b build.	"v group: #pie."   c group: #pie.	"Layouting"    c move: #graph onTheLeftOf: #pie.	RTMetricNormalizer new view: c view;                 objects: data;                 distinctColor.		c open.		"v openTitled: 'Data Visualization'."! !!CMECECModel class methodsFor: 'examples' stamp: 'JigyasaGrover 1/5/2017 14:35'!example1	"Vegetation grid animation without foragers"		| aModel v n c es anim popup|		aModel := self		initialize;		new.			v := RTView new.	"v @ RTZoomableView."		n := RTMultiLinearColor new		colors: (RTColorPalette sequential colors: 9 scheme: 'YlGnBu').			c := n command: [ :cells | cells biomass / 10.0 ].		aModel initSimulation.	aModel runStep.		es := (RTBox new		color: c;		size: 25) elementsOn: aModel theCMECECVegetationUnits.			v addAll: es.		"Adding a popup for biomass info on hover"	popup := RTPopup new.	popup text: [ :object | object asPopupText ].	es @ popup.		"Adding a popup for object inspection on left click"	es do: [:element | element when: TRMouseLeftClick do: [ :evt | element model inspect ]].		RTGridLayout new		gapSize: 0;		lineItemsCount: aModel spaceModel column;		on: v elements.		v canvas camera focusOnCenterScaled.		anim := RTActiveAnimation new.	anim intervalInMilliseconds: 0.	anim		blockToExecute: [ aModel runStep.			v elements do: #updateShape ].	anim inView: v.		v openWithToolbar.! !!CMECECModel class methodsFor: 'examples' stamp: 'JigyasaGrover 1/10/2017 11:59'!example3	"Vegetation grid animation without foragers"		| aModel v n c es anim popup menu|		aModel := self		initialize;		new.		v := RTView new.		n := RTMultiLinearColor new		colors: (RTColorPalette sequential colors: 9 scheme: 'YlGnBu').			c := n command: [ :cells | cells biomass / 10.0 ].		aModel initSimulation.	aModel runStep.		es := (RTBox new		color: c;		size: 25) elementsOn: aModel theCMECECVegetationUnits.			v addAll: es.		"Adding a popup for biomass info on hover"	popup := RTPopup new.	popup text: [ :object | object asPopupText ].	es @ popup.		"Adding a popup for object inspection on left click"	es do: [:element | element when: TRMouseLeftClick do: [ :evt | element model inspect ]].		menu := RTMenuBuilder new view: v. 	menu menu: 'Visualize' background: Color red callback: [ self visualize ].		RTGridLayout new		gapSize: 0;		lineItemsCount: aModel spaceModel column;		on: v elements.		v canvas camera focusOnCenterScaled.		anim := RTActiveAnimation new.	"anim intervalInMilliseconds: 0."	anim		blockToExecute: [ aModel runStep.			v elements do: #updateShape ].	anim inView: v.		v openWithToolbar.	! !!CMECECModel class methodsFor: 'examples' stamp: 'HernanMoralesDurand 12/30/2017 13:49'!example2		| aModel |		aModel := self initialize new initSimulation."	(CMPharoGridSimulation new 		on: aModel with: aModel theCMECECVegetationUnits) 			runAndVisualize."! !!CMECECModel class methodsFor: 'default' stamp: 'nbecu 6/2/2015 22:17'!defaultProbes^self probes! !!CMECECModel class methodsFor: 'default' stamp: 'nbecu 5/28/2015 20:53'!defaultInit		^#homogeneousEnv! !!CMECECModel class methodsFor: '- default value' stamp: ' 26/3/15 08:27'!unrestrainedInitialNumber_default	"Return the default value of unrestrainedInitialNumber attribute"		^10! !!CMECECModel class methodsFor: '- default value' stamp: ' 26/3/15 08:27'!restrainedInitialNumber_default	"Return the default value of restrainedInitialNumber attribute"		^10! !CMECECForager subclass: #CMECECRestrained	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Cormas-Model-ECEC'!!CMECECRestrained methodsFor: 'accessing' stamp: 'NickPapoulias 9/20/2016 11:53'!pov	^ Color brown! !!CMECECRestrained methodsFor: 'accessing' stamp: ' 26/3/15 08:30'!energy: x		energy := x! !!CMECECRestrained methodsFor: 'accessing' stamp: ' 26/3/15 08:30'!energy	"Getter accessor with default value = 50.	!!!! Code automaticaly generated by Cormas !!!!  "		^energy ifNil: [energy := 50]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CMECECRestrained class	instanceVariableNames: ''!!CMECECRestrained class methodsFor: '- default value' stamp: ' 26/3/15 08:30'!harvestRate_default	"Return the default value of harvestRate attribute"		^0.5! !!CMECECRestrained class methodsFor: 'testing' stamp: ' 26/3/15 08:30'!isAbstract		^false! !!CMECECRestrained class methodsFor: 'pov symbols' stamp: ' 26/3/15 08:30'!VectorialPOV_Restrained	"Returns an array containing the settings of a Situated entity vectorial pov symbol in the following order:(color red) (color green) (color blue) (lineColor red) (lineColor green) (lineColor blue) lineWidth sizeratio position (array of outline vertices)"		^#(0.0 0.329996 1.0 0.0 0.0 0.0 1 0.7 #center #(-7.395 #@- 9.6963 24.99 #@- 13.537 16.32 #@ 24.8704 4.08 #@ 4.72222 -9.69 #@ 24.2407 -10.71 #@ 10.3889 -14.28 #@ 2.83333 -26.01 #@- 4.09259 -25.5 #@- 9.12963 -15.81 #@- 13.537 -13.26 #@- 26.1296 -13.26 #@- 14.1667 -7.395 #@- 9.6963))! !!CMECECRestrained class methodsFor: 'accessing' stamp: ' 26/3/15 08:30'!harvestRate	"Getter accessor with default value = 0.5.	!!!! Code automaticaly generated by Cormas !!!!  "		^harvestRate ifNil: [harvestRate := 0.5]! !!CMECECRestrained class methodsFor: 'accessing' stamp: ' 26/3/15 08:30'!fertilityThreshold	"Getter accessor with default value = 100.	!!!! Code automaticaly generated by Cormas !!!!  "		^fertilityThreshold ifNil: [fertilityThreshold := 100]! !!CMECECRestrained class methodsFor: 'accessing' stamp: ' 26/3/15 08:30'!catabolicRate	"Getter accessor with default value = 2.	!!!! Code automaticaly generated by Cormas !!!!  "		^catabolicRate ifNil: [catabolicRate := 2]! !CMECECForager subclass: #CMECECUnrestrained	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Cormas-Model-ECEC'!!CMECECUnrestrained methodsFor: 'accessing' stamp: 'NickPapoulias 9/19/2016 16:21'!pov	^ Color red! !!CMECECUnrestrained methodsFor: 'accessing' stamp: ' 26/3/15 08:31'!energy	"Getter accessor with default value = 50.	!!!! Code automaticaly generated by Cormas !!!!  "		^energy ifNil: [energy := 50]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CMECECUnrestrained class	instanceVariableNames: ''!!CMECECUnrestrained class methodsFor: 'pov symbols' stamp: ' 26/3/15 08:31'!VectorialPOV_Unrestrained	"Returns an array containing the settings of a Situated entity vectorial pov symbol in the following order:(color red) (color green) (color blue) (lineColor red) (lineColor green) (lineColor blue) lineWidth sizeratio position (array of outline vertices)"		^#(1.0 0.0 0.0 0.0 0.0 0.0 1 0.7 #center #(-5.51429 #@- 9.78095 10.6417 #@- 9.64286 24.8307 #@- 13.6217 18.6732 #@ 2.5 16.7069 #@ 24.7857 5.23787 #@ 4.63757 -2.0748 #@ 10.3571 -7.66472 #@ 24.1561 -8.62047 #@ 10.3042 -11.9656 #@ 2.74868 -24.8307 #@- 1.07143 -26.1693 #@- 8.92857 -13.3992 #@- 13.6217 -11.0098 #@- 26.2143 -11.0098 #@- 14.2513 -5.51429 #@- 9.78095))! !!CMECECUnrestrained class methodsFor: '- default value' stamp: ' 26/3/15 08:31'!harvestRate_default	"Return the default value of harvestRate attribute"		^0.99! !!CMECECUnrestrained class methodsFor: 'accessing' stamp: ' 26/3/15 08:31'!harvestRate	"Getter accessor with default value = 0.99.	!!!! Code automaticaly generated by Cormas !!!!  "		^harvestRate ifNil: [harvestRate := 0.99]! !!CMECECUnrestrained class methodsFor: 'accessing' stamp: ' 26/3/15 08:31'!fertilityThreshold	"Getter accessor with default value = 100.	!!!! Code automaticaly generated by Cormas !!!!  "		^fertilityThreshold ifNil: [fertilityThreshold := 100]! !!CMECECUnrestrained class methodsFor: 'accessing' stamp: ' 26/3/15 08:31'!catabolicRate	"Getter accessor with default value = 2.	!!!! Code automaticaly generated by Cormas !!!!  "		^catabolicRate ifNil: [catabolicRate := 2]! !!CMECECUnrestrained class methodsFor: 'testing' stamp: ' 26/3/15 08:31'!isAbstract		^false! !CMSpatialEntityCell subclass: #CMECECVegetationUnit	instanceVariableNames: 'biomass'	classVariableNames: ''	poolDictionaries: ''	category: 'Cormas-Model-ECEC'!!CMECECVegetationUnit methodsFor: 'pov' stamp: 'NickPapoulias 9/19/2016 16:21'!povBiomass	"return a Green Color gradient, according to #biomass"		^self		povAttribute: #biomass		min: 0		max: self class K		color: Color green! !!CMECECVegetationUnit methodsFor: 'accessing' stamp: ' 26/3/15 08:32'!biomass: anObject	"Setter accessor of attribute biomass "		biomass = anObject ifTrue: [^nil].	"for optimization"	biomass := anObject.	self changed! !!CMECECVegetationUnit methodsFor: 'accessing' stamp: ' 26/3/15 08:32'!biomass	"Getter accessor with default value = 0.	!!!! Code automaticaly generated by Cormas !!!!  "		^biomass ifNil: [biomass := 0]! !!CMECECVegetationUnit methodsFor: 'converting' stamp: 'JigyasaGrover 1/5/2017 10:48'!asPopupText	"returns the text in the popup"		^ 'biomass: ', biomass asString! !!CMECECVegetationUnit methodsFor: 'init' stamp: ' 26/3/15 08:32'!initRandomBiomass	"Set the initial value of biomass, between ]0 ; 1] ."		self biomass: Cormas random! !!CMECECVegetationUnit methodsFor: 'control' stamp: ' 26/3/15 08:32'!step		self logisticGrowth! !!CMECECVegetationUnit methodsFor: 'control' stamp: 'NickPapoulias 9/19/2016 16:53'!pov	^ self class pallete		rtValue: (self biomass / 10.0)		! !!CMECECVegetationUnit methodsFor: 'growth' stamp: ' 26/3/15 08:32'!logisticGrowth		self		biomass:			(Cormas				logisticGrowth: self biomass				r: self class r				K: self class K)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CMECECVegetationUnit class	instanceVariableNames: 'K r pallete'!!CMECECVegetationUnit class methodsFor: '- default value' stamp: 'NickPapoulias 9/19/2016 16:54'!pallete	^ pallete ifNil: [ pallete := RTMultiLinearColor new		colors: (RTColorPalette sequential colors: 9 scheme: 'YlGnBu') ].! !!CMECECVegetationUnit class methodsFor: '- default value' stamp: ' 26/3/15 08:32'!k_default	"Return the default value of k attribute"		^10! !!CMECECVegetationUnit class methodsFor: '- default value' stamp: ' 26/3/15 08:32'!biomass_default	"Return the default value of biomass attribute"		^0! !!CMECECVegetationUnit class methodsFor: '- default value' stamp: ' 26/3/15 08:32'!r_default	"Return the default value of r attribute"		^0.2! !!CMECECVegetationUnit class methodsFor: '- default value' stamp: ' 26/3/15 08:32'!K_default	"Return the default value of K attribute"		^10! !!CMECECVegetationUnit class methodsFor: '- default value' stamp: ' 26/3/15 08:32'!state_default	"Return the default value of state attribute"		^nil! !!CMECECVegetationUnit class methodsFor: 'accessing' stamp: ' 26/3/15 08:32'!r: anObject	"Setter accessor of attribute r "		r := anObject! !!CMECECVegetationUnit class methodsFor: 'accessing' stamp: ' 26/3/15 08:32'!K	"Getter accessor with default value = 10.	!!!! Code automaticaly generated by Cormas !!!!  "		^K ifNil: [K := 10]! !!CMECECVegetationUnit class methodsFor: 'accessing' stamp: ' 26/3/15 08:32'!K: anObject	"Setter accessor of attribute K "		K := anObject! !!CMECECVegetationUnit class methodsFor: 'accessing' stamp: ' 26/3/15 08:32'!r	"Getter accessor with default value = 0.2.	!!!! Code automaticaly generated by Cormas !!!!  "		^r ifNil: [r := 0.2]! !!CMECECVegetationUnit class methodsFor: 'testing' stamp: ' 26/3/15 08:32'!isAbstract		^false! !