CMSpatialEntityCell subclass: #CMConwayCell	instanceVariableNames: ''	classVariableNames: 'CurrentId'	poolDictionaries: ''	category: 'Cormas-Model-Conway'!!CMConwayCell commentStamp: 'SergeStinckwich 4/1/2016 20:13' prior: 0!I'm a cell of a Conway's Game of Life.!!CMConwayCell methodsFor: 'probes' stamp: 'SergeStinckwich 3/29/2016 16:29'!isAlive	self state = #alive		ifTrue: [ ^ 1 ].	^ 0! !!CMConwayCell methodsFor: 'init' stamp: 'SergeStinckwich 3/29/2016 16:29'!initTen	" 10 % to be dead"	Cormas random < 0.1		ifTrue: [ self state: #dead ]		ifFalse: [ self state: #alive ]! !!CMConwayCell methodsFor: 'init' stamp: 'SergeStinckwich 3/29/2016 16:29'!initAllDead	self state: #dead! !!CMConwayCell methodsFor: 'init' stamp: 'SergeStinckwich 3/29/2016 16:29'!initRandomly	Cormas random < 0.5		ifTrue: [ self state: #dead ]		ifFalse: [ self state: #alive ]! !!CMConwayCell methodsFor: 'control' stamp: 'SergeStinckwich 3/29/2016 16:25'!newState	| nbOfAlives |	nbOfAlives := self neighbourhood count: [ :n | n state = #alive ].	self state = #dead & (nbOfAlives = 3)		ifTrue: [ ^ self bufferState: #alive ].	(self state = #alive and: [ nbOfAlives = 2 or: [ nbOfAlives = 3 ] ])		ifTrue: [ ^ self bufferState: #alive ].	^ self bufferState: #dead! !!CMConwayCell methodsFor: 'pov' stamp: 'SergeStinckwich 3/29/2016 16:28'!pdv	^ state! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CMConwayCell class	instanceVariableNames: ''!!CMConwayCell class methodsFor: 'pov symbols' stamp: 'SergeStinckwich 3/31/2016 08:40'!SpatialEntityPOV_dead	"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"	<pov:#dead>	^Array with: 0.0 with: 0.0 with: 0.0! !!CMConwayCell class methodsFor: 'pov symbols' stamp: 'SergeStinckwich 3/31/2016 08:40'!SpatialEntityPOV_alive	"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"	<pov:#alive>	^Array with: 0.0 with: 0.670004 with: 0.0! !!CMConwayCell class methodsFor: '- default value' stamp: ' 26/3/15 10:26'!state_default	"Return the default value of state attribute"		^nil! !CormasModel subclass: #CMConwayModel	instanceVariableNames: 'theCMConwayCells'	classVariableNames: ''	poolDictionaries: ''	category: 'Cormas-Model-Conway'!!CMConwayModel commentStamp: 'SergeStinckwich 4/1/2016 20:15' prior: 0!I'm a model of Conway's Game of Life: https://en.wikipedia.org/wiki/Conway%27s_Game_of_LifeThe universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, alive or dead. Every cell interacts with its eight neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent.At each step in time, the following transitions occur:- Any live cell with fewer than two live neighbours dies, as if caused by under-population.- Any live cell with two or three live neighbours lives on to the next generation.- Any live cell with more than three live neighbours dies, as if by over-population.- Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.!!CMConwayModel methodsFor: 'probes' stamp: 'SergeStinckwich 4/1/2016 20:38'!alive	^ (self theCMConwayCells count: [ :c | c state = #alive ]) / self theCMConwayCells size! !!CMConwayModel methodsFor: 'probes' stamp: 'SergeStinckwich 4/1/2016 20:38'!dead	^ (self theCMConwayCells count: [ :c | c state = #dead ]) / self theCMConwayCells size! !!CMConwayModel methodsFor: 'control' stamp: 'SergeStinckwich 5/31/2015 15:02'!stepSynchronously: t	super stepSynchronously: t! !!CMConwayModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:03'!theCMConwayCells	^ theCMConwayCells ifNil: [ theCMConwayCells := OrderedCollection new ]! !!CMConwayModel methodsFor: 'accessing' stamp: 'SergeStinckwich 4/3/2016 15:03'!theCMConwayCells: aCollection	theCMConwayCells := aCollection! !!CMConwayModel methodsFor: 'init' stamp: 'SergeStinckwich 5/31/2015 15:03'!init	self spaceModel setNbNeighbours: 8! !!CMConwayModel methodsFor: 'init' stamp: 'SergeStinckwich 5/31/2015 15:02'!initRandomly	self spaceModel setNbNeighbours: 8.	self initCells: #initRandomly! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CMConwayModel class	instanceVariableNames: ''!!CMConwayModel class methodsFor: 'description' stamp: ' 26/3/15 10:26'!version		^'Conway.pcl'! !!CMConwayModel class methodsFor: 'description' stamp: 'SergeStinckwich 3/29/2016 22:56'!cormasCompatibleVersion	^ #(2014 2 24 7 27 12)! !!CMConwayModel class methodsFor: 'description' stamp: ' 26/3/15 10:26'!vwCompatibleVersion		^'7.6'! !!CMConwayModel class methodsFor: 'description' stamp: 'SergeStinckwich 3/29/2016 22:53'!howToRunIt		^'1. In the Model zone, double-click on the Cell entity that appears in the spatial entities list, you then access the definition window. 1.1. Double-click on the initialize method. A text editor appears with the corresponding code (the state attribute of a Cell can take either the #dead or the #alive value). Close the text editor window.1.2. Double-click on the newState method. A text editor appears with the code corresponding to the transition function of the game of life. Close both windows.2. In the Model zone, at the bottom-right, in the Define the observation scrolling menu, choose the Space item. A window appears for the definition of viewpoints.2.1. In the situated entities list, at the top-left, select Cell2.2. In the observation methods list, below, select the pdv method.2.3. If you click on the associated symbols in the list (at the top-right), you can visualize the colors corresponding to the different states of the Cell: #alive (white) #dead (black).2.4. Close this window.3. In the Visualization zone, open a spatial grid (1st icon). A new window opens. By default, it is a 10 * 10 spatial grid composed of 4-connexe squares with toroidal boundaries. 3.1. Choose an 8-connexity: Topology -> Cell shape -> Square -> 8-connexe.3.2. The Grid size item from the Topology menu perm opens a window allowing you to choose the number of lines and columns. For example, choose 50 * 50.3.3. Initial state -> Execute method... -> initialize launches the execution of the initialization method (see step 1) for each cell of the grid.3.4. If you right-click on the grid, you can choose for each entity of the model the observation method or viewpoint (cf. step 2). For the Cell choose the pdv viewpoint.4. In the Simulation zone, click on the Initialize... button.4.1. Select the init and evoluerSynchrone: methods.4.2. Validate and close the window (Apply and close button).5. In the Simulation zone, click on the Step button or enter the number of time steps in the Final time field and click Run. 6. To launch the simulation from a particular initial situation (" glider gun " structure), load the gliderGun.ext file from the spatial grid menu: Initial state -> Attributes -> state -> Load mapThen repeat steps 4 and 5.'! !!CMConwayModel class methodsFor: 'description' stamp: ' 26/3/15 10:26'!lastUpdate		^'March 4, 2014'! !!CMConwayModel class methodsFor: 'default' stamp: 'SergeStinckwich 3/29/2016 22:55'!defaultControl	^ #stepSynchronously:! !!CMConwayModel class methodsFor: 'default' stamp: 'SergeStinckwich 3/29/2016 22:55'!defaultInit	^ #initRandomly! !!CMConwayModel class methodsFor: 'examples' stamp: 'SergeStinckwich 4/1/2016 20:38'!example1	| aModel nbLines v es anim |	aModel := self		initialize;		new.	nbLines := 50.	aModel initializeSpaceModel.	aModel		createGridX: nbLines		Y: nbLines		neighbourhood: 4		closed: true.	v := RTView new.	aModel initSimulation.	aModel runStep.	v clean.	es := (RTBox new		color: [ :e | 			e state == #dead				ifTrue: [ Color white ]				ifFalse: [ Color black ] ];		size: 25) elementsOn: aModel theCMConwayCells.	v addAll: es.	RTGridLayout new		gapSize: 0;		lineItemsCount: aModel spaceModel column;		on: v elements.	v canvas camera focusOnCenterScaled.	anim := RTActiveAnimation new.	anim intervalInMilliseconds: 0.	anim		blockToExecute: [ aModel runStep.			v elements do: #updateShape ].	anim inView: v.	v openWithToolbar  ! !!CMConwayModel class methodsFor: 'examples' stamp: 'SergeStinckwich 4/1/2016 20:38'!example2	| v nbLines choosenModel numberOfModels aModel models normalizer colors es groupsOfElements anim |	v := RTView new.	nbLines := 10.	choosenModel := CMConwayModel.	numberOfModels := 20.	models := (1 to: numberOfModels)		collect: [ :i | 			aModel := choosenModel				initialize;				new.			aModel initializeSpaceModel.			aModel				createGridX: nbLines				Y: nbLines				neighbourhood: 4				closed: true.			aModel initSimulation.			aModel runStep.			aModel ].	normalizer := RTMultiLinearColor new colors: RTPalette c4.	colors := (1 to: numberOfModels)		collect: [ :i | normalizer level: (i / numberOfModels) asFloat ].	groupsOfElements := models		with: colors		collect: [ :m :c | 			es := (RTBox new				color: [ :e | 					e state == #dead						ifTrue: [ Color white ]						ifFalse: [ c ] ];				size: 25) elementsOn: m theCMConwayCells.			v addAll: es.			RTGridLayout new				gapSize: 0;				lineItemsCount: m spaceModel column;				on: es.			es ].	RTGridLayout on: groupsOfElements.	v canvas camera focusOnCenterScaled.	anim := RTActiveAnimation new.	anim intervalInMilliseconds: 500.	anim		blockToExecute: [ models do: #runStep.			v elements do: #updateShape ].	anim inView: v.	v openWithToolbar! !