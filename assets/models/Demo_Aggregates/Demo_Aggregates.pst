<?xml version="1.0"?><st-source><!-- Name: Demo_AggregatesPackageName: Demo_AggregatesParcel: #('Demo_Aggregates')ParcelName: Demo_AggregatesDate: 4:12:20 pm November 13, 2016 --><time-stamp>From VisualWorksÂ® NonCommercial, 7.6 of lundi 3 mars 2008 on dimanche 13 novembre 2016 at 16:12:20</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Demo_Aggregates</name><environment>CormasNS.Models</environment><private>false</private><imports>			private Smalltalk.*			private CormasNS.Kernel.*			</imports><category>TSECategory</category><attributes><package>Demo_Aggregates</package></attributes></name-space><class><name>Grove</name><environment>CormasNS.Models.Demo_Aggregates</environment><super>CormasNS.Kernel.SpatialEntityAggregate</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cormas-TSE</category><attributes><package>Demo_Aggregates</package></attributes></class><class><name>Plot</name><environment>CormasNS.Models.Demo_Aggregates</environment><super>CormasNS.Kernel.SpatialEntityElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>seed tree </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cormas-TSE</category><attributes><package>Demo_Aggregates</package></attributes></class><class><name>Demo_Aggregates</name><environment>CormasNS.Models.Demo_Aggregates</environment><super>CormasNS.Kernel.CormasModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thePlots theGroves seeds partitionsAverageSize nbCells theFragmentedForests </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cormas-TSE</category><attributes><package>Demo_Aggregates</package></attributes></class><comment><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates</class-id><body>Instance Variables:	theFragmentedEntitys 	&lt;OrderedCollection of: CormasNS.Models.TSE.FragmentedEntity&gt; 	theAggregates 	&lt;OrderedCollection of: CormasNS.Models.TSE.Aggregate&gt; 	theCells 	&lt;OrderedCollection of: CormasNS.Models.TSE.Cell&gt; </body></comment><class><name>FragmentedForest</name><environment>CormasNS.Models.Demo_Aggregates</environment><super>CormasNS.Kernel.SpatialEntityNotConnex</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cormas-TSE</category><attributes><package>Demo_Aggregates</package></attributes></class><shared-variable><name>CurrentId</name><environment>CormasNS.Models.Demo_Aggregates.FragmentedForest</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Demo_Aggregates</package></attributes></shared-variable><shared-variable><name>CurrentId</name><environment>CormasNS.Models.Demo_Aggregates.Grove</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Demo_Aggregates</package></attributes></shared-variable><shared-variable><name>CurrentId</name><environment>CormasNS.Models.Demo_Aggregates.Plot</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Demo_Aggregates</package></attributes></shared-variable><methods><class-id>CormasNS.Models.Demo_Aggregates.Grove</class-id> <category>pov</category><body package="Demo_Aggregates" selector="povSize">povSize		self components size &lt; 50 ifTrue: [^#small].	self components size &lt; 250 ifTrue: [^#medium].	^#big</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Grove</class-id> <category>control</category><body package="Demo_Aggregates" selector="expand">expand	"Each forest expands on external cells that are mostly surrounded by forest"		| collec |	collec := Cormas		elementsFrom: self surround		withMaxValue: #forestSurroundingRatio.	collec size &gt;= (self surround size / 10)		ifTrue:			[collec := Cormas				selectRandomlyFrom: collec				subCollectionSize: (self surround size / 10) rounded].	collec do: [:c |  c tree: true]</body><body package="Demo_Aggregates" selector="swell">swell	"super swell ifTrue:[self getSkins do: [:coll | coll do: [:c| c tree: true]]]"		^super swell		ifTrue:			[self components do: [:c | c tree: true].			true]		ifFalse: [false]</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Grove</class-id> <category>procedure</category><body package="Demo_Aggregates" selector="setForest">setForest		self components do: [:c | c tree: true]</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Grove class</class-id> <category>testing</category><body package="Demo_Aggregates" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Grove class</class-id> <category>pov symbols</category><body package="Demo_Aggregates" selector="defaultColor">defaultColor "Returns the default color (Automatically defined by Cormas)." ^ColorValue green</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_big">SpatialEntityPOV_big"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 0.340007 with: 0.0</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_Grove">SpatialEntityPOV_Grove"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 1.0 with: 0.0</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_medium">SpatialEntityPOV_medium"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 0.670004 with: 0.0</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_small">SpatialEntityPOV_small"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 1.0 with: 0.0</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot</class-id> <category>pov</category><body package="Demo_Aggregates" selector="povSeed">povSeed		self isSeed ifTrue: [^#seed].	(self myCSE: Grove) isNil		ifFalse: [^(self theCSE at: #Grove) colorId]		ifTrue: [^#empty]</body><body package="Demo_Aggregates" selector="povSeedAB">povSeedAB	self seed = #a ifTrue: [^#seedA].	self seed = #b ifTrue: [^#seedB].</body><body package="Demo_Aggregates" selector="povTree">povTree	self tree		ifTrue: [^#tree]		ifFalse: [^#empty]</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot</class-id> <category>control</category><body package="Demo_Aggregates" selector="forestSurroundingRatio">forestSurroundingRatio"Returns the number of neighbour cells that belong to an Aggregate, divided by the size of the neighbourhood"	^(self neighbourhood select: [:n | n belongToAggregate]) size		/ self neighbourhood size</body><body package="Demo_Aggregates" selector="newSeedAB">newSeedAB	self seed isNil ifTrue:[			Cormas random &lt; 0.01 ifTrue:[self seed: #newA]].	self seed isNil ifTrue:[			Cormas random &lt; 0.02 ifTrue:[self seed: #newB]].</body><body package="Demo_Aggregates" selector="newState">newState"Each cell has a small probability of changing its state "	self seed: false.	Cormas random &lt; 5.0e-3 ifTrue: 			[self tree 				ifTrue: 					[self tree: false.					self seed: nil]				ifFalse: 					[self tree: true.					self seed: true]]</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot</class-id> <category>testing</category><body package="Demo_Aggregates" selector="belongToAggregate">belongToAggregate	^self theCSE notNil and: 			[(self theCSE includesKey: #Aggregate)				and: [(self theCSE at: #Aggregate) notNil]]</body><body package="Demo_Aggregates" selector="isSeed">isSeed^self seed = true</body><body package="Demo_Aggregates" selector="isTree">isTree	^self tree</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot</class-id> <category>init</category><body package="Demo_Aggregates" selector="init">init	self seed: false</body><body package="Demo_Aggregates" selector="initAtt">initAtt	super init.	self seed: false.	self tree: Cormas random &lt; 0.5</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot</class-id> <category>accessing</category><body package="Demo_Aggregates" selector="seed">seed	"Getter accessor with initial value = false. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^seed ifNil:[seed := false]</body><body package="Demo_Aggregates" selector="seed:">seed: aBoolean 	"Setter accessor of attribute seed	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	seed = aBoolean ifTrue:[^nil].   "for optimization"	seed := aBoolean. 	self changed</body><body package="Demo_Aggregates" selector="tree">tree	"Getter accessor with initial value = false. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^tree ifNil:[tree := false]</body><body package="Demo_Aggregates" selector="tree:">tree: aBoolean 	"Setter accessor of attribute tree	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	tree = aBoolean ifTrue:[^nil].   "for optimization"	tree := aBoolean. 	self changed</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot class</class-id> <category>testing</category><body package="Demo_Aggregates" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot class</class-id> <category>- default value</category><body package="Demo_Aggregates" selector="seed_default">seed_default 	"Return the default value of attribute #seed : false.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^false</body><body package="Demo_Aggregates" selector="tree_default">tree_default 	"Return the default value of attribute #tree : false.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^false</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot class</class-id> <category>+ parameter unit</category><body package="Demo_Aggregates" selector="seed_type">seed_type 	"Return the type of attribute #seed.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Boolean</body><body package="Demo_Aggregates" selector="tree_type">tree_type 	"Return the type of attribute #tree.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Boolean</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Plot class</class-id> <category>pov symbols</category><body package="Demo_Aggregates" selector="defaultColor">defaultColor "Returns the default color (Automatically defined by Cormas)." ^ColorValue yellow</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_black">SpatialEntityPOV_black"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 0.0 with: 0.0</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_blue">SpatialEntityPOV_blue"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 0.0 with: 1.0</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_brown">SpatialEntityPOV_brown"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.670004 with: 0.670004 with: 0.0</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_chartreuse">SpatialEntityPOV_chartreuse"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 0.670004 with: 0.670004</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_empty">SpatialEntityPOV_empty"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.399951 with: 0.399951 with: 0.399951</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_Plot">SpatialEntityPOV_Plot"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 1.0 with: 1.0 with: 0.0</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_tree">SpatialEntityPOV_tree"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 1.0 with: 0.0</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates</class-id> <category>seeds</category><body package="Demo_Aggregates" selector="givenSeeds">givenSeeds"set 5 particular seeds on the space"	self seeds: OrderedCollection new.	self seeds add: self spaceModel centralLocation;		add: self spaceModel upperRightLocation;		add: self spaceModel upperLeftLocation;		add: self spaceModel lowerRightLocation;		add: self spaceModel lowerLeftLocation.	self seeds do: [:c | c seed: true].	^self seeds</body><body package="Demo_Aggregates" selector="randomSeeds:">randomSeeds: n	"Spreads randomly n seeds on the space"	| newSeed |	self seeds: OrderedCollection new.	[self seeds size &lt; n]		whileTrue: 			[newSeed := Cormas selectRandomlyFrom: self thePlots.			(self seeds includes: newSeed)				ifFalse: 					[self seeds add: newSeed.					newSeed seed: true]].	^self seeds</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates</class-id> <category>init</category><body package="Demo_Aggregates" selector="init1FragmentedAggregate">init1FragmentedAggregate"Build 1 FragmentedForest of forested plots"	self loadEnvironmentFromFile: '3forests.env'.	self buildFragmentedEntitiesFromCells.	self defaultDisplay.	self displayPov: #nil of: Grove.	self displayPov: #povId of: FragmentedForest</body><body package="Demo_Aggregates" selector="init2AggregateLevels">init2AggregateLevels"Build the 3 groves + the FragmentedForest. Each FragmentedForest is composed of groves having the same surface: 	1 of 128 groves of 1 plot, 	1 of 49 groves of 2 plots, 	1 of 21 groves of 3 plots,	1 of 1 grove of 240 plots, 	1 of 1 grove of 80 plots, 	1 of 2 groves of 4 plots,	1 of 1 grove of 143 plots"	self loadEnvironmentFromFile: '3forests.env'.	self createAggregates: Grove from: Plot verifying: [:aCell | aCell tree].	self theGroves do:[:ag| ag initNeighbourhood].	self createFragmentedEntities: FragmentedForest from: Grove attribute: #size.	self defaultDisplay.	self displayPov: #nil of: Grove.	self displayPov: #povId of: FragmentedForest</body><body package="Demo_Aggregates" selector="initForests">initForests	"Constructs the forest aggregates"	self loadEnvironmentFromFile: '3forests.env'.	self buildForests.	self buildFragmentedEntitiesFromAggregates.	self defaultDisplay</body><body package="Demo_Aggregates" selector="setAggregatesFifthFourth">setAggregatesFifthFourth	"Constructs a complete space partition by regular segmentation"	self spaceModel loadEnvironmentFromFile: '3forests.env'.	self createAggregates: Grove from: Plot horizontalDividers: 5 verticalDividers: 4.	self defaultDisplay</body><body package="Demo_Aggregates" selector="setAggregatesFromRandomSeeds">setAggregatesFromRandomSeeds	"Constructs a complete space partition from seeds"	self loadEnvironmentFromFile: '3forests.env'.	self createAggregates: Grove		fromSeeds: (self randomSeeds: 30)		sizeDistribution: #(#(30 80) )		"sizeDistribution: #(#(1 800) #(5 30) #(4 3) #(20 10))".	self displayPov: #povId of: Grove.	self displayInfo: #info_surface of: Grove</body><body package="Demo_Aggregates" selector="setSingletonAggregatesFromRandomSeeds">setSingletonAggregatesFromRandomSeeds	"Constructs 30 singleton groves from random seeds.	Step = swellForests: t"	"self spaceModel loadEnvironmentFromFile: '3forests.env'."	self createSingletonAggregates: Grove		fromSeeds: (self randomSeeds: 30).	self ask: Grove toDo: #setForest.	self displayPov: #povId of: Grove.	self displayInfo: #info_surface of: Grove</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates</class-id> <category>control</category><body package="Demo_Aggregates" selector="step2AggregateLevels:">step2AggregateLevels: t	"the 1st FragmentedForest will swell"	self ask:			(Cormas elementsFrom: self theFragmentedForests withMinValue: #minSurface)		toDo: #swell</body><body package="Demo_Aggregates" selector="stepForests:">stepForests: t "Each cell has a small probability of changing its state. Then each grove expands on external cells that are mostly surrounded by groves. Finally, the aggregates are rebuilt"	self thePlots do: [:c | c newState].	self theGroves do: [:a | a expand].	self buildForests</body><body package="Demo_Aggregates" selector="swellForests:">swellForests: t"Each grove swells on external cells"	self askRandom: Grove toDo: #swell</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates</class-id> <category>accessing</category><body package="Demo_Aggregates" selector="seeds">seeds^seeds</body><body package="Demo_Aggregates" selector="seeds:">seeds: aValueseeds := aValue</body><body package="Demo_Aggregates" selector="theFragmentedForests">theFragmentedForests^theFragmentedForests ifNil:[theFragmentedForests := IndexedSet new]</body><body package="Demo_Aggregates" selector="theFragmentedForests:">theFragmentedForests: xtheFragmentedForests := x</body><body package="Demo_Aggregates" selector="theGroves">theGroves^theGroves ifNil:[theGroves := IndexedSet new]</body><body package="Demo_Aggregates" selector="theGroves:">theGroves: x 	theGroves := x</body><body package="Demo_Aggregates" selector="thePlots">thePlots^thePlots ifNil:[thePlots := IndexedSet new]</body><body package="Demo_Aggregates" selector="thePlots:">thePlots: x 	thePlots := x</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates</class-id> <category>procedures</category><body package="Demo_Aggregates" selector="buildForests">buildForests	"Create the Aggregates from trees. Each aggregate must be bigger than 25 cells (set the compactness)"	self deleteSpatialEntitySet: Grove.	self createAggregates: Grove from: Plot verifying: [:aCell | aCell tree] minimumSize: 25.	self theGroves do: [:agg | agg initNeighbourhood].	self spaceModel meanCompactness: Grove</body><body package="Demo_Aggregates" selector="buildFragmentedEntitiesFromAggregates">buildFragmentedEntitiesFromAggregates	self spaceModel		setFragmentedEntities: FragmentedForest		from: Grove		verifying: [:c | c size &gt; 50]</body><body package="Demo_Aggregates" selector="buildFragmentedEntitiesFromCells">buildFragmentedEntitiesFromCells	self spaceModel		setFragmentedEntities: FragmentedForest		from: Plot		verifying: [:c | c tree]</body><body package="Demo_Aggregates" selector="createNewAggregateWith:">createNewAggregateWith: setCell| fe |fe := FragmentedForest newWith: setCell.fe id: FragmentedForest CurrentId.fe components: OrderedCollection new.fe components addAll: setCell.setCell do: [: c | c theCSE at: #FragmentedForest put: fe].(self spaceModel spatialEntities at: #FragmentedForest) add: fe.fe spaceModel: self spaceModel.self theFragmentedForests add: fe.</body><body package="Demo_Aggregates" selector="defaultDisplay">defaultDisplay	self openOneSpaceInterface.	self displayPov: #povTree of: Plot.	self displayPov: #delimitors of: Grove</body><body package="Demo_Aggregates" selector="exportForests">exportForests	self spaceModel 		exportAggregateClass: Grove 		separator: $;</body><body package="Demo_Aggregates" selector="exportNeighboors">exportNeighboors	self spaceModel saveNeighboorsClass: Grove separator: $;	"self spaceModel saveNeighboorsClass: Cell separator: $;"</body><body package="Demo_Aggregates" selector="importForests">importForests	self spaceModel 		importAggregateClass: Grove		componentClass: Plot		separator: $;</body><body package="Demo_Aggregates" selector="importNeighboors">importNeighboors	self spaceModel loadNeighboorsClass: Grove separator: $;</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates class</class-id> <category>description</category><body package="Demo_Aggregates" selector="aProposDe">aProposDe	| txt |	txt := 'Ce modele illustre les principes d''utilisation des entites spatiales agregatives de Cormas. Dans l''arbre d''heritage des entites spatiales generiques de Cormas, l''entite spatiale composee SpatialEntity_Set se specialise :      * SpatialEntityAggregate  dont les composants respectent une contrainte de contiguite      * SpatialEntityNotConnex  dont les composants peuvent etre disjoints.Les operations d''agregation-desagregation sont realisees a partir des deux attributs, components        (une collection d''entites spatiales de niveau hierarchique inferieur) et theCSE (un registre d''appartenance a des entites spatiales de niveaux superieurs). Le modele TSE permet de tester deux facons de creer des agregats avec Cormas.La premiere consiste a definir les composantes comme des ensembles de cellules contigues partageant une meme condition. On commence par charger une grille de 50*50 cellules de type Cell dont l''attribut context est soit #forest (condition d''agregation), soit #empty. La creation des entites spatiales composees Aggregate est soumise a une contrainte supplementaire sur le nombre minimum (fixe a 25) de composants contigus verifiant la condition d''agregation. Faire co-exister dans le meme modele des entites spatiales definies a differents niveaux offre une grande souplesse pour ecrire les methodes de dynamique de la vegetation. Certains processus seront plus facilement decrits au niveau cellulaire, d''autres au niveau agrege. Ainsi, dans cet exemple theorique simpliste, chaque cellule a une probabilite fixee (tres faible) de changer de contexte. Une dynamique d''expansion par la lisiere est ecrite (au niveau agrege) de la facon suivante: un certain nombre (correspondant au centieme du total des cellules composants l''entite forestiere) de cellules en lisiere vont etre integrees a la foret. Dans le but de garder une certaine compacite aux entites forestieres, on choisit en priorite les cellules de la lisiere qui sont entourees du plus grand nombre de cellules deja agregees. La seconde consiste a partir de 10 cellules graines, et a creer autant d''agregats initialement constitues  d''un seul composant: une graine. Le processus iteratif de construction des agregats repose sur l''integration, parmi les cellules en lisiere, de toutes celles qui n''appartiennent pas encore a un autre agregat.'				asText emphasizeAllWith: #(#bold).	ComposedTextView open: txt asValue		label: 'About ' , self name		icon: (Icon constantNamed: #workspace)		extent: 600 @ 600</body><body package="Demo_Aggregates" selector="authors">authors^ 'Christophe Le PagePierre Bommel'	</body><body package="Demo_Aggregates" selector="comments">comments^ 'The Demo_Aggregates model is a didactic model that allows to test two different ways to create spatial aggregates with Cormas. This model introduces the functionning principles of Cormas aggregative spatial entities. In the inheritage tree of the Cormas generic spatial entities, the compound spatial entity SpatialEntity_Set is specialized in :      	* SpatialEntityAggregate  whose components should be contiguous (the Groves),   		* SpatialEntityNotConnex  whose components may not be contiguous (the FragmentedForests).The operations of aggregation-disintegration are based on the two attributes: ''components'' (a collection of lower level spatial entities) and ''theCSE'' (a register of belonging to higer level spatial entities). In the first scenario (initForests - stepForests:), the components are defined as sets of contiguous cells sharing a same condition. The initialization loads a spatial grid made of 50*50 cells (instances of the Plot class) from a file. Each plot has either #tree (aggregation condition) or #empty as value of its ''context'' attribute. The effective instanciation of the Groves (SpatialEntityAggregate) is done by selecting the connected plots with #tree as context, plus an additional constraint about a minimum number (set to 25) of contiguous plots verifying the aggregation condition. To let co-exist in the same model several spatial entities defined at different levels gives a great flexibility to write the dynamics of the model. Some of the processes are more easily described at the cellular level (newContext), as for some others, the aggregated level is more suitable (expand or swell). In this didactic and simplistic example, each plot has a fixed (very low) probability to switch its context attribute value. At the level of the groves, a spreading process from the edges is written like this: a given number (corresponding to the hundredth of the total number of components of the forestry entity) of cells at the outside edge are going to be aggregated to the forest. In order to keep a high compacity to the forestry entities, a priority is given to the cells that are surrounded by the highest number of already aggregated cells.       In the second one, 10 seed cells are randomly chosen in the 50*50 spatial grid. 10 aggregates are intialized with one of these seeds as a single component. The iterative building process of the aggregates relies on the integration, among the cells belonging to the outside edge of each aggregate, of all the one that do not yet belong to another aggregate'</body><body package="Demo_Aggregates" selector="cormasCompatibleVersion">cormasCompatibleVersion^ #(2016 10 21 18 20 7)</body><body package="Demo_Aggregates" selector="creationDate">creationDate^ '05 October 2004'	</body><body package="Demo_Aggregates" selector="currentDeveloperName">currentDeveloperName^ 'Christophe Le Page &amp; Pierre Bommel'	</body><body package="Demo_Aggregates" selector="emails">emails^ 'lepage@cirad.frbommel@cirad.fr'	</body><body package="Demo_Aggregates" selector="howToRunIt">howToRunIt| txt |txt := '1. Spreading of 3 forests\' withCRs asText emphasizeAllWith: #(#bold #large).txt := txt, '1.1 From the Cormas main menu, load ' asText, ('Files -&gt; Load ' asText emphasizeAllWith: #italic), '. Select ' asText, ('TSE ' asText emphasizeAllWith: #italic), 'and choose ' asText, ('SpreadForest.st ' asText emphasizeAllWith: #color -&gt; ColorValue red), ' version of TSE.\' withCRs asText.txt := txt, '1.2 Click on the first icon of the ' asText, ('Visualisation ' asText emphasizeAllWith: #color -&gt; ColorValue red), 'area to open the standard spatial grid.\' withCRs asText.txt := txt, '1.3 From the spatial grid menu, use ' asText, ('Tools -&gt; Load an environment' asText emphasizeAllWith: #italic), ', select ' asText, ('3forests.env ' asText emphasizeAllWith: #italic), 'and validate. This will initialize a 50*50 grid and assign values (#tree or #empty) to the cell attribute ' asText, ('context\' withCRs asText emphasizeAllWith: #italic).txt := txt, '1.4 Right-click within the spatial grid window to select the ' asText, ('povTree ' asText emphasizeAllWith: #italic), 'view for ' asText, ('Cell' asText emphasizeAllWith: #italic), '.\' withCRs asText.txt := txt, '1.5 Click on the ' asText, ('Initialize ' asText emphasizeAllWith: #italic), 'button of the ' asText, ('Simulation ' asText emphasizeAllWith: #color -&gt; ColorValue red),  'area.\' withCRs asText.txt := txt, '1.6 Select the ' asText, ('initForests ' asText emphasizeAllWith: #italic), 'and ' asText, ('stepForests: ' asText emphasizeAllWith: #italic), 'methods, then validate by clicking on ' asText, ('Apply and close.' asText emphasizeAllWith: #italic), ' This version builds first level Aggregates (the forests are composed of connected cells with #forest as context) and second level aggregates : a fragmented aggregate composed with first level aggregates.\'  withCRs asText.txt := txt, '1.7 Right-click within the spatial grid window to select the ' asText, ('povSize ' asText emphasizeAllWith: #italic), 'view for ' asText, ('Aggregate' asText emphasizeAllWith: #italic), '.\' withCRs asText.txt := txt, '1.8 Enter 30 in the ' asText, ('Final time ' asText emphasizeAllWith: #italic), 'input field of the ' asText,  ('Simulation ' asText emphasizeAllWith: #color -&gt; ColorValue red),  'area.\' withCRs asText.txt := txt, '1.9 Click on the ' asText, ('Run ' asText emphasizeAllWith: #italic), 'button of the ' asText,  ('Simulation ' asText emphasizeAllWith: #color -&gt; ColorValue red),  'area.\\' withCRs asText.txt := txt, ('2. Swelling from 10 seeds\' withCRs asText emphasizeAllWith: #(#bold #large)).txt := txt, '2.1 From the spatial grid menu, use ' asText, ('Tools -&gt; Load an environment' asText emphasizeAllWith: #italic), ', select ' asText, ('10seeds.env ' asText emphasizeAllWith: #italic), 'and validate. This will initialize a 50*50 grid and assign values (true or false) to the cell attribute ' asText, ('seed\' withCRs asText emphasizeAllWith: #italic).txt := txt, '2.2 Right-click within the spatial grid window to select the ' asText, ('povSeed ' asText emphasizeAllWith: #italic), 'view for ' asText, ('Cell' asText emphasizeAllWith: #italic), '.\' withCRs asText.txt := txt, '2.3 Click on the ' asText, ('Initialize ' asText emphasizeAllWith: #italic), 'button of the ' asText, ('Simulation ' asText emphasizeAllWith: #color -&gt; ColorValue red),  'area.\' withCRs asText.txt := txt, '2.4 Select the ' asText, ('initSeeds ' asText emphasizeAllWith: #italic), 'and ' asText, ('stepSeeds: ' asText emphasizeAllWith: #italic), 'methods, then validate by clicking on ' asText, ('Apply and close.\' asText emphasizeAllWith: #italic) withCRs asText.txt := txt, '2.5 Right-click within the spatial grid window to select the ' asText, ('povId ' asText emphasizeAllWith: #italic), 'view for ' asText, ('Aggregate' asText emphasizeAllWith: #italic), '.\' withCRs asText.txt := txt, '2.6 Click on the ' asText, ('Step ' asText emphasizeAllWith: #italic), 'button of the ' asText,  ('Simulation ' asText emphasizeAllWith: #color -&gt; ColorValue red),  'area.\\' withCRs asText.txt := txt, ('3. Save and load your environment\' withCRs asText emphasizeAllWith: #(#bold #large)).txt := txt, '3.1 From the Cormas main menu, load ' asText, ('Files -&gt; Load ' asText emphasizeAllWith: #italic), '. Select ' asText, ('TSE ' asText emphasizeAllWith: #italic), 'and choose ' asText, ('Save-Load-Aggregates.st ' asText emphasizeAllWith: #color -&gt; ColorValue red), ' version of TSE.\' withCRs asText.txt := txt, '3.2 The init method will load a 50*50 grid and load the aggregate instances and their neighbours.\' withCRs asText.txt := txt, '3.2 If you want to see how to save the current grid, the aggregates and their neighbours, see the ' asText, ('exportAggregatesAndNeighbours:' asText emphasizeAllWith: #italic), ' method. (You can also save the neighbours of the cells. It can save time when you load big irregular grid (see the ' asText, ('exportNeighboors' asText emphasizeAllWith: #italic), ' method).\' withCRs asText.ComposedTextView open: txt asValue label: ('How to run ', self name, '     step-by-step instructions') icon: (Icon constantNamed: #workspace) extent: 530@550</body><body package="Demo_Aggregates" selector="lastUpdate">lastUpdate^ 'dimanche 13 novembre 2016'	</body><body package="Demo_Aggregates" selector="version">version^ 'Demo_Aggregates.pcl'	</body><body package="Demo_Aggregates" selector="versionComments">versionComments^ '  --------------------- TSE.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page *** --------------------- TSE.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page *** --------------------- TSE.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page *** --------------------- TSE.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page *** --------------------- TSE.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21A simple demo to understand how Aggregates and FragmentedAggregates work. *** Developer: Christophe Le Page *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21context -&gt; tree *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel *** --------------------- Demo_Aggregates.pcl --------------------- Date: 2016.10.21 *** Developer: Christophe Le Page &amp; Pierre Bommel ***'	</body><body package="Demo_Aggregates" selector="vwCompatibleVersion">vwCompatibleVersion^ '7.6'	</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates class</class-id> <category>ADvance</category><body package="Demo_Aggregates" selector="ad2diagram_TSE_Class_Diagram">ad2diagram_TSE_Class_Diagram	^#(#{ICC.ADvance.AD2DiagramSpec} 		#name: 'TSE_Class_Diagram' 		#creationDateSeconds: 3434943460 		#modificationDateSeconds: 3434944201 		#author: 		#(#{ICC.ADvance.AD2Identity} 			#nickName: 'Pierre' 			#name: 'Pierre Bommel' 			#company: 'CIRAD - UR Green' ) 		#state: 		#(#{ICC.ADvance.AD2DiagramState} 			#bits: 23 			#zoom: '100%' 			#translation: #(#{Core.Point} 0 0 ) 			#scriptDepth: 3 			#associationDepth: 2 ) 		#filter: 		#(#{ICC.ADvance.AD2StructureFilter} 			#bits: 77 			#filteredInstProtocols: #('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' 'resources' ) 			#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 			#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' 'resources' 'signal*' ) 			#filteredClassMethods: #('initialize' 'new' ) 			#filteredInstVars: #() 			#filteredClassInstVars: #() 			#filteredSharedVars: #() ) 		#classes: #(			#(#{CormasNS.Kernel.SpatialEntityNotConnex} 760 637 1 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 77 					#filteredInstProtocols: #('access-*' #accessing 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' #display 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' #manipulation 'menu*' 'primitiv*' #procedures 'resources' ) 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 					#filteredClassMethods: #('initialize' 'new' ) 					#filteredInstVars: #() 					#filteredClassInstVars: #() 					#filteredSharedVars: #() ) ) 			#(#{CormasNS.Kernel.SpatialEntity} 392 42 1 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 77 					#filteredInstProtocols: #('access-*' #accessing 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' #deprecated #display #distance 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' #'initialize-release' 'interface*' 'menu*' #neighbourhood #occupants 'primitiv*' #print #'private-Pov' 'resources' #testing ) 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 					#filteredClassProtocols: #('*declarations' '*specs' #acces 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' #'instance creation' 'resources' 'signal*' ) 					#filteredClassMethods: #('initialize' 'new' ) 					#filteredInstVars: #() 					#filteredClassInstVars: #('bounds' ) 					#filteredSharedVars: #() ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{CormasNS.Kernel.SpatialEntity} 						#attribute: 'neighbourhood' 						#layout1: #(0.677 1.0 ) 						#layout2: #(1.0 0.788194 ) ) ) ) 			#(#{CormasNS.Kernel.SpatialEntityElement} 174 276 1 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 77 					#filteredInstProtocols: #('access-*' #accessing 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' #display #distance #'distance-deprecated' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' #manipulation 'menu*' #neighbourhood #occupants 'primitiv*' #private_changed #private_grid #procedures 'resources' #testing ) 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 					#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' 'resources' 'signal*' #testing ) 					#filteredClassMethods: #('initialize' 'new' ) 					#filteredInstVars: #() 					#filteredClassInstVars: #() 					#filteredSharedVars: #() ) ) 			#(#{CormasNS.Models.TSE.Cell} 178 543 1 				#backgroundColor: #(#{Graphics.ColorValue} #yellow ) 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 77 					#filteredInstProtocols: #('access-*' #accessing 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' #pov 'primitiv*' 'resources' ) 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 					#filteredClassMethods: #('initialize' 'new' ) 					#filteredInstVars: #() 					#filteredClassInstVars: #() 					#filteredSharedVars: #() ) ) 			#(#{CormasNS.Kernel.SpatialEntitySet} 712 192 1 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 77 					#filteredInstProtocols: #('access-*' #accessing 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' #display #distance 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' #init 'interface*' 'menu*' 'primitiv*' #print #'private-Pov' 'resources' #testing ) 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 					#filteredClassMethods: #('initialize' 'new' ) 					#filteredInstVars: #() 					#filteredClassInstVars: #() 					#filteredSharedVars: #() ) ) 			#(#{CormasNS.Models.TSE.FragmentedEntity} 744 786 1 				#backgroundColor: #(#{Graphics.ColorValue} #yellow ) ) 			#(#{CormasNS.Models.TSE.Aggregate} 578 748 1 				#backgroundColor: #(#{Graphics.ColorValue} #yellow ) ) 			#(#{CormasNS.Models.TSE.TSE} 1066 314 1 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 77 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' #testDistances 'update:*' ) 					#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' #description 'documentation' 'exampl*' 'fileIn/Out' 'info' 'resources' 'signal*' ) 					#filteredClassMethods: #('initialize' 'new' ) 					#filteredInstVars: #() 					#filteredClassInstVars: #() 					#filteredSharedVars: #() ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{CormasNS.Models.TSE.Cell} 						#attribute: 'theCells' 						#layout1: #(0.0 0.66287 ) 						#layout2: #(1.0 0.366864 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{CormasNS.Models.TSE.Aggregate} 						#attribute: 'theAggregates' 						#layout1: #(0.0 0.98861 ) 						#layout2: #(1.0 0.0 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{CormasNS.Models.TSE.FragmentedEntity} 						#attribute: 'theFragmentedEntitys' 						#layout1: #(0.00184502 1.0 ) 						#layout2: #(1.0 0.180328 ) ) ) ) 			#(#{CormasNS.Kernel.SpatialEntityAggregate} 583 631 1 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 77 					#filteredInstProtocols: #('access-*' #accessing 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' #control #coordinates #display 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' #indices 'interface*' #manipulation 'menu*' 'primitiv*' #procedures 'resources' ) 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 					#filteredClassMethods: #('initialize' 'new' ) 					#filteredInstVars: #() 					#filteredClassInstVars: #() 					#filteredSharedVars: #() ) ) ) )</body><body package="Demo_Aggregates" selector="advanceSubjectSpec">advanceSubjectSpec	^#(#{ICC.ADvance.AD2Subject} #classNames: #('CormasNS.Kernel.SpatialEntityAggregate' 'CormasNS.Kernel.SpatialEntityNotConnex' 'CormasNS.Kernel.SpatialEntity' 'CormasNS.Models.TSE.Aggregate' 'CormasNS.Kernel.SpatialEntityElement' 'CormasNS.Kernel.SpatialEntitySet' 'CormasNS.Models.TSE.FragmentedEntity' 'CormasNS.Models.TSE.TSE' 'CormasNS.Models.TSE.Cell'))</body><body package="Demo_Aggregates" selector="markedAsSubjectClass">markedAsSubjectClass</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates class</class-id> <category>testing</category><body package="Demo_Aggregates" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.Demo_Aggregates class</class-id> <category>- default value</category><body package="Demo_Aggregates" selector="seeds_default">seeds_default 	"Return the default value of seeds attribute"		^nil</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.FragmentedForest</class-id> <category>procedure</category><body package="Demo_Aggregates" selector="minSurface">minSurface"return the surface of the smallest grove"	^Cormas minOf: #surface amongObjects: self components</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.FragmentedForest</class-id> <category>control</category><body package="Demo_Aggregates" selector="step">step		self components do: [:g | g swell].	self changed</body><body package="Demo_Aggregates" selector="swell">swell		super swell</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.FragmentedForest class</class-id> <category>testing</category><body package="Demo_Aggregates" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_Aggregates.FragmentedForest class</class-id> <category>pov symbols</category><body package="Demo_Aggregates" selector="defaultColor">defaultColor "Returns the default color (Automatically defined by Cormas)." ^(ColorValue red: 0.0 green: 0.670004 blue: 0.0)</body><body package="Demo_Aggregates" selector="SpatialEntityPOV_FragmentedEntity">SpatialEntityPOV_FragmentedEntity"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)"^Array with: 0.0 with: 0.670004 with: 0.0</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SpatialEntityNotConnex</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.SpatialEntitySet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>CormasModel</name><environment>CormasNS.Kernel</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cormas timeStepValue channel activeInit activeControl spaceModel data simManager database collector defaultAttributesSetter sensitivitySetter delayedChanges allClassVarBOSS </inst-vars><class-inst-vars>timeStep cellClass spatialClasses socialClasses passiveClasses povColorsDict visualStateIsOpen charts activeProbes activityDiagrams currentSimulation randUi autoUpdating quickChanges </class-inst-vars><imports></imports><category>CormasKernel-Interface</category><attributes><package>Cormas</package></attributes></class><class><name>SpatialEntityAggregate</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.SpatialEntitySet</super><private>false</private><indexed-type>none</indexed-type><inst-vars>compactness </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>SpatialEntityElement</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.SpatialEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>orderedNeighbourhood default </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class></st-source>