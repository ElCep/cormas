"
DefaultAttributesSetter is the root class that allows to set and change the values of the parameters.
There are 2 types of default values of the parameters:
 - the InitialValues that are set at the initialisation of a simulation
 - the DefaultValues that are predefined in the model.
If the user changes the value of a parameter (xxx for instance) to test its impacts, the InitialValue (originaly equals to the defaultValue) is changed: the reader accessor (#xxx) of the attribute is compiled with the new value assigned by user. To return back to the defaultValue, the reader accessor is recompiled using the default value that is stored into #xxx_default method (in '- default value' protocol at the class level).

Instance Variables:
	classAttribValue_List	<SelectionInListSortAware>	description of classAttribValue_List
	cormasModel	<CormasModel>	description of cormasModel
	defaultValueHolder	<ValueModel>	description of defaultValueHolder
	dialogValue	<SimpleDialog>	description of dialogValue
	getterAccessor	<ValueModel>	description of getterAccessor
	selectedRow	<ValueModel>	description of selectedRow
	setterAccessor	<ValueModel>	description of setterAccessor


"
Class {
	#name : #DefaultAttributesSetter,
	#superclass : #Object,
	#instVars : [
		'selectedRow',
		'classAttribValue_List',
		'cormasModel',
		'defaultValueHolder',
		'allAttributsList',
		'hiddenParametersInterface'
	],
	#category : #'Cormas-Core-Tools'
}

{ #category : #getAttributes }
DefaultAttributesSetter class >> attributsFromClass: aClass [
	"returns a list of ClassAttributeValues of Entities"
	"Add the attributs"
	
	| set |
	set := OrderedCollection new.
	aClass superclass = CMSpatialEntityCell
		ifTrue:
			[set add: 'state'	"Parmis les attributs herites, il n'y a que state qui puisse etre un nombre"].
	(aClass superclass = CormasModelGameInterface
		or: [aClass superclass = CMAbstractModel])
		ifTrue:
			[set add: 'periodicity'	"Parmis les attributs herites, il n'y a que periodicity qui puisse etre un nombre a analyser"].
	set addAll: aClass instVarNames.	"and add attributs superclasses except from Entities"
	set addAll: (self inheritedInstVarNamesForClass: aClass).	"Remove all collections of CormasModel automaticaly buid from a model classes . i.e: theCells  "	"(aClass superclass = CormasModelGameInterface or:[aClass superclass = CormasModel])
		ifTrue: [aClass spatialClasses do: [:c | set remove: (CMAbstractModel getterForEntityClass: c)  ifAbsent:[]].
			    aClass socialClasses do: [:c | set remove: (CMAbstractModel getterForEntityClass: c) ifAbsent:[]].
			    aClass passiveClasses do: [:c | set remove: (CMAbstractModel getterForEntityClass: c) ifAbsent:[]]   ]."
	^set
]

{ #category : #getAttributes }
DefaultAttributesSetter class >> attributsWithAccessorsFromClass: aClass [
	"returns a list of ClassAttributeValues of Entities that present the two accessors (setter & getter).
	!! All attributs without accessors are removed from the set "
	
	| set |
	set := OrderedCollection new.
	(self attributsFromClass: aClass)
		do:
			[:anAttribut | 
			((aClass compiledMethodAt: anAttribut asSymbol ifAbsent:[nil]) isNil
				or: [(aClass compiledMethodAt: (anAttribut , ':') asSymbol ifAbsent:[nil]) isNil])
				ifFalse: [set add: anAttribut asString]].
	^set
]

{ #category : #compiling }
DefaultAttributesSetter class >> defineDefaultClassMethod: attributName ofClass: aClass withDefaultValue: defaultValue [
	"Compile the default getter class method code with defaultValue (a String) into '- default value' protocol.
The new method is written at class level for instance attributes as well as for class variable.

ex: self defineDefaultClassMethod: 'truc' ofClass: Agent withDefaultValue: '22' 		
then, the code will be:
truc_default 
	''Return the default value of attribute #truc : 22.'	
	!! This method was automatically generated by Cormas !!''
	
	^22

attributName = <String> 
aClass = <Class> 
defaultValue = <Number or String or Boolean or Dictionary or Array or Collection>  "
	
	| code classLevel defaultString |
	defaultString := self transformAsString: defaultValue.
	code := (attributName ,
			'_default \	"Return the default value of attribute #' , attributName ,
			' : ' , defaultString , '.	\' , Cormas automaticCommentString , '"\\	^'
		, defaultString) withCRs.
	aClass isMeta
		ifFalse: [classLevel := aClass class]
		ifTrue: [classLevel := aClass].
	classLevel
		compile: code
		classified: '- default value' asString
		notifying: nil
]

{ #category : #compiling }
DefaultAttributesSetter class >> defineGetterMethod: attributName ofClass: aClass withDefaultDictionary: defaultValue protocol: protocol [
	"Build the getter accessor method code with defaultValue (a Dictionary)
ex: self defineGetterMethod: 'truc' ofClass: Agent withDefaultDictionary: aDico protocol: 'accessing'  		
then, the code will be:
truc
	''Getter accessor with default value = Dictionary ''
	^bidon ifNil:[bidon := Dictionary new]

attributName = <String> 
aClass = <Class> 
defaultValue = <Dictionary> 
protocol = <String> "
	
	| code |
	code := (attributName , '\	"Getter accessor with new Dictionary. \'
		, Cormas automaticCommentString , '"\	^' , attributName , ' ifNil:[' ,
			attributName , ' := Dictionary new.') withCRs.
	defaultValue isEmpty
		ifFalse:
			[defaultValue
				keysAndValuesDo:
					[:k :v | 
					code := (code , '\              ' , attributName , ' at: ' , k asString ,
							' put: ' , v asString , '.') withCRs]].
	code := code , ']'.
	aClass
		compile: code
		classified: protocol asString
		notifying: nil
]

{ #category : #compiling }
DefaultAttributesSetter class >> defineGetterMethod: attributName ofClass: aClass withDefaultValue: defaultValue protocol: protocol [
	"Build the getter accessor method code with defaultValue

ex: self defineGetterMethod: 'bidon' ofClass: Agent withDefaultValue: 22 protocol: 'accessing'  		
then, the code will be:
bidon
	''Getter accessor with default value = 22 '
	!! Code automaticaly generated by Cormas !!''  
	^bidon ifNil:[bidon := 22]

attributName = <String> 
aClass = <Class> 
defaultValue = <Object> 
protocol = <String> "
	
	| code defaultValueString theClass |
	theClass := aClass isMeta
		ifTrue: [aClass instanceBehavior]
		ifFalse: [aClass].
	(theClass hasRandomAttribute: attributName)
		ifTrue:
			[aClass isMeta
				ifTrue:
					[(aClass instanceBehavior isRandomAttribute: attributName scopeLevel:
							#class)
						ifTrue:
							[^self defineGetterMethod: attributName ofClass: aClass withRandom:
									defaultValue protocol: protocol]]
				ifFalse:
					[(aClass isRandomAttribute: attributName scopeLevel: #instance)
						ifTrue:
							[^self defineGetterMethod: attributName ofClass: aClass withRandom:
									defaultValue protocol: protocol]]].
	defaultValue isNil
		ifTrue:
			[code := (attributName , '\	"Getter accessor without default value.\'
				, Cormas automaticCommentString , '"\	^' , attributName) withCRs]
		ifFalse:
			[defaultValueString := self transformAsString: defaultValue.
			code := (attributName , '\	"Getter accessor with default value = ' ,
					defaultValueString , '.\' , Cormas automaticCommentString , '"\	^' ,
					attributName , ' ifNil:[' , attributName , ' := ' , defaultValueString
				, ']') withCRs].
	aClass
		compile: code
		classified: protocol asString
		notifying: nil
]

{ #category : #compiling }
DefaultAttributesSetter class >> defineGetterMethod: attributName ofClass: aClass withRandom: defaultValue protocol: protocol [
	"Build the getter accessor method code with random generator

ex: self defineGetterMethod: 'truc' ofClass: Agent withDefaultValue: 'random' protocol: 'accessing' . Then, the code will be:
truc
	''Getter accessor with default value = Cormas random ''
	^bidon ifNil:[bidon := Cormas random]
attributName = <String> 
aClass = <Class> 
defaultValue = <Object> 
protocol = <String> "
	
	| code defaultValueString anArray |
	aClass isMeta
		ifTrue:
			[anArray := aClass instanceBehavior randomAttributes
				detect:
					[:line | (line at: 1) = attributName and: [(line at: 2) = #class]]]
		ifFalse:
			[anArray := aClass randomAttributes
				detect:
					[:line | (line at: 1) = attributName and: [(line at: 2) = #instance]]].
	defaultValueString := 'Cormas ' , (anArray at: 3) asString , 'From: '.
	defaultValueString := defaultValueString , (anArray at: 4) printString.
	defaultValueString := defaultValueString , ' to: '.
	defaultValueString := defaultValueString , (anArray at: 5) printString.
	code := (attributName , '\	"Getter accessor with random value = ' ,
			defaultValueString , ' "\' , Cormas automaticCommentString , '\	^' ,
			attributName , ' ifNil:[' , attributName , ' := ' , defaultValueString ,
			']') withCRs.
	aClass
		compile: code
		classified: protocol asString
		notifying: nil
]

{ #category : #compiling }
DefaultAttributesSetter class >> defineGetterMethodFrom: aCAV protocol: protocol [
	"Build the getter accessor method code with defaultValue
ex: self defineGetterMethod: 'truc' ofClass: Agent withDefaultValue: 22 protocol: 'accessing'  		
then, the code will be:
truc
	''Getter accessor with default value = 22 ''
	^bidon ifNil:[bidon := 22]
attributName = <String> ; aClass = <Class> ; defaultValue = <Object> ; protocol = <String> "
	
	| code defaultValueString attributName |
	"	theClass := aClass isMeta ifTrue:[aClass instanceBehavior] ifFalse:[aClass].
	(theClass hasRandomAttribute: attributName) ifTrue:[
		aClass isMeta 
			ifTrue:[(aClass instanceBehavior isRandomAttribute: attributName scopeLevel: #class) ifTrue:[^self defineGetterMethod: attributName ofClass: aClass withRandom: defaultValue protocol: protocol]] 
			ifFalse:[(aClass isRandomAttribute: attributName scopeLevel: #instance) ifTrue:[^self defineGetterMethod: attributName ofClass: aClass withRandom: defaultValue protocol: protocol]]]."
	attributName := aCAV targetAttribute asString.
	aCAV valueType = Random
		ifTrue: [^self defineGetterRandomMethodFrom: aCAV protocol: protocol].
	aCAV currentValue isNil
		ifTrue:
			[code := (attributName , '\	"Getter accessor without default value "\	^' ,
					attributName) withCRs]
		ifFalse:
			[defaultValueString := self transformAsString: aCAV currentValue.
			code := (attributName , '\	"Getter accessor with default value = ' ,
					defaultValueString , '. \' , Cormas automaticCommentString , ' "\	^' ,
					attributName , ' ifNil:[' , attributName , ' := ' , defaultValueString
				, ']') withCRs].
	aCAV targetClass
		compile: code
		classified: protocol asString
		notifying: nil
]

{ #category : #compiling }
DefaultAttributesSetter class >> defineGetterRandomMethodFrom: aCAV protocol: protocol [
	"Build the getter accessor method code with default random Value.
truc
	''Getter accessor with default value = 22 ''
	^bidon ifNil:[bidon := 22]
attributName = <String> ; aClass = <Class> ; defaultValue = <Object> ; protocol = <String> "
	
	| code defaultValueString attributName |
	defaultValueString := 'Cormas ' , aCAV intOrFloat value asString ,
			'From: '.
	defaultValueString := defaultValueString
		, aCAV minValueHolder value printString.
	defaultValueString := defaultValueString , ' to: '.
	defaultValueString := defaultValueString
		, aCAV maxValueHolder value printString.
	attributName := aCAV targetAttribute asString.
	code := (attributName , '\	"Getter accessor with random value = '
		, (self transformAsString: aCAV currentValue) , '. \'
		, Cormas automaticCommentString , '  "\	^' , attributName , ' ifNil:[' ,
			attributName , ' := ' , defaultValueString , ']') withCRs.
	aCAV targetClass
		compile: code
		classified: protocol asString
		notifying: nil
]

{ #category : #compiling }
DefaultAttributesSetter class >> defineSetterMethod: attributName ofClass: aClass protocol: protocol [
	"Build the setter accessor method code.

ex: self defineSetterMethod: 'truc' ofClass: Agent protocol: 'accessing'  		
then, the code will be:
truc: anObject
	''Setter accessor of attribute truc''
	truc := anObject

attributName = <String> 
aClass = <Class> 
protocol = <String> "
	
	| setterMethod |
	setterMethod := (attributName asString , ':') asSymbol.
	(aClass canUnderstand: setterMethod)
		ifTrue:
			["(Dialog confirm: 'Setter accessor of ', attributName asString, ' already defined. \Overwrite it  ?' withCRs)
				ifFalse: ["
			^nil].	"]"
	self silentlyDefineSetterMethod: attributName ofClass: aClass protocol:
			protocol
]

{ #category : #getAttributes }
DefaultAttributesSetter class >> getAllAttributsFromClass: aClass [
	"Return a list containing the static variable names (as string) + a separator string + the attributs names (as string) of aClass and all its super classes until
the Cormas entity classes.
!! All attributs without accessors are removed from the list "
	
	| list list2 |
	"Add the static variables"
	list := (self staticAttributsFromClass: aClass) asSortedCollection asList.	"Add a separator"
	list add: CMSimManager separator.	"Add the attributs"
	list2 := self attributsFromClass: aClass.
	list addAll: list2 asSortedCollection asList.
	^list
]

{ #category : #getParameters }
DefaultAttributesSetter class >> getDefaultValueOfAttribut: anAttribut ofClass: aClass [
	"Returns the default value of anAttribut (static or instance) of aClass, using the  'anAttribut_default' accessor  located into the ' - default value ' protocol.
Compatibility with previous Cormas version: before changing, it tests if the default class method exists otherwise compiles it

	anAttribut = <Symbol>
	aClass = <Class>"
	
	| default classLevel inst |
	aClass isMeta
		ifTrue: [classLevel := aClass instanceBehavior]
		ifFalse: [classLevel := aClass].
	default := self
		tryMethod: (anAttribut , '_default') asSymbol
		onClass: classLevel.
	default = 'Non ca n a pas marche du tout. VA falloir traiter ca'
		ifTrue:
			[classLevel isGenericEntity ifTrue: [^nil].
			aClass isMeta
				ifTrue:
					[default := self
						tryMethod: anAttribut asSymbol
						onClass: classLevel]
				ifFalse:
					[inst := aClass basicNew.
					default := self
						tryMethod: anAttribut asSymbol
						onClass: inst].
			default = 'Non ca n a pas marche du tout. VA falloir traiter ca'
				ifTrue: [^nil]
				ifFalse:
					[default isLiteral
						ifTrue:
							[self
								defineDefaultClassMethod: anAttribut asString
								ofClass: aClass
								withDefaultValue: default]]].
	^default
]

{ #category : #getParameters }
DefaultAttributesSetter class >> getDefaultValuesForClass: aClass attributs: attributs [
	"attributs is a Set of static attributs or instance attributs"
	"Returns the default value of anAttribut (static or instance) of aClass, using the  'anAttribut_default' accessor  located into the ' - default value ' protocol.
	anAttribut = <Symbol>
	aClass = <Class>"
	
	| infoList default defaultParameters |
	defaultParameters := OrderedCollection new: attributs size.
	attributs
		do:
			[:anAttribut | 
			(aClass findSelector: anAttribut asSymbol) isNil
				ifFalse:
					[infoList := Array new: 3.
					default := self getDefaultValueOfAttribut: anAttribut ofClass: aClass.
					infoList
						at: 1 put: aClass;
						at: 2
							put: anAttribut asSymbol;
						at: 3 put: default.
					defaultParameters add: infoList	"default isNil 
						ifFalse: [defaultParameters add: infoList]"]].
	^defaultParameters
]

{ #category : #getParameters }
DefaultAttributesSetter class >> getInitialValueOfAttribut: anAttribut ofClass: aClass [
	"Returns the Initial value of anAttribut (static or instance) of aClass, using #anAttribut accessor of aClass.
	anAttribut = <Symbol>
	aClass = <Class>"
	
	| initialValue targetLevel |
	aClass isMeta
		ifTrue: [targetLevel := aClass instanceBehavior]
		ifFalse: [targetLevel := aClass basicNew].
	initialValue := self
		tryMethod: anAttribut asSymbol
		onClass: targetLevel.
	initialValue = 'Non ca n a pas marche du tout. VA falloir traiter ca'
		ifTrue:
			[aClass isMeta
				ifTrue:
					[initialValue := self
						tryMethod: (anAttribut , '_default') asSymbol
						onClass: aClass instanceBehavior]
				ifFalse:
					[initialValue := self
						tryMethod: (anAttribut , '_default') asSymbol
						onClass: aClass].
			initialValue = 'Non ca n a pas marche du tout. VA falloir traiter ca'
				ifTrue: [^nil]
				ifFalse:
					[initialValue isLiteral
						ifTrue:
							[self
								defineDefaultClassMethod: anAttribut asString
								ofClass: aClass
								withDefaultValue: initialValue]]].
	^initialValue
]

{ #category : #getParameters }
DefaultAttributesSetter class >> getInitialValuesForClass: aClass attributs: attributs [
	"Returns the Initial value of anAttribut (static or instance) of aClass, using the  #anAttribut accessor.
	anAttribut = <Symbol> attributs is a Set of static attributs or instance attributs
	aClass = <Class>"
	
	| infoList initialValue initialParameters |
	initialParameters := OrderedCollection new: attributs size.
	attributs
		do:
			[:anAttribut | 
			(Cormas findSelector: anAttribut asSymbol in: aClass) isNil
				ifFalse:
					[infoList := Array new: 3.
					initialValue := self getInitialValueOfAttribut: anAttribut ofClass:
							aClass.
					infoList
						at: 1 put: aClass;
						at: 2
							put: anAttribut asSymbol;
						at: 3 put: initialValue.
					initialParameters add: infoList]].
	^initialParameters
]

{ #category : #getParameters }
DefaultAttributesSetter class >> inheritedInstVarNamesForClass: aClass [
	"Return an array of the attributs of the superclass"
	
	| list entityClasses allEntityClasses aSuperclass |
	list := OrderedCollection new.
	entityClasses := ('Cormas-Core' asPackage classTagNamed: 'Entities') classes.
	entityClasses
		addAll:
			(('Cormas-Core' asPackage classTagNamed: 'Interface') classes).
	entityClasses
		addAll:
			(('Cormas-Core' asPackage classTagNamed: 'Communication') classes).
	allEntityClasses := entityClasses copy.
	entityClasses do: [:c | allEntityClasses add: c class].
	aSuperclass := aClass superclass.	"I just want the attributs of the super class until the Entities class"
	[(allEntityClasses includes: aSuperclass)
		or: [aSuperclass = Object or: [aSuperclass = Object class]]]
		whileFalse:
			[list addAll: aSuperclass instVarNames.
			aSuperclass := aSuperclass superclass].
	^list
]

{ #category : #getParameters }
DefaultAttributesSetter class >> isChangedPerformedForAttribut: anAttribut ofClass: aClass [
	"Returns a Boolean depending if the instuction 'self changed' is written or not in the setter accessor of anAttibut.
	anAttribut = <Symbol>
	aClass = <Class>"
	
	^((aClass compiledMethodAt: (anAttribut , ':') asSymbol) getSource
		findString: 'self changed' startingAt: 1) ~= 0
]

{ #category : #resources }
DefaultAttributesSetter class >> minusIcon [
	
	^SpaceInterface removeEntityIcon
]

{ #category : #'instance creation' }
DefaultAttributesSetter class >> newFromPreviousSetter: anAttributeSetter [
	
	| inst |
	inst := self new.
	inst cormasModel: anAttributeSetter cormasModel.
	inst allAttributsList: anAttributeSetter allAttributesList.
	inst init.
	^inst
]

{ #category : #'instance creation' }
DefaultAttributesSetter class >> newOn: aCormasModelInstance [
	
	| inst |
	inst := self new.
	inst cormasModel: aCormasModelInstance.
	inst init.
	^inst
]

{ #category : #resources }
DefaultAttributesSetter class >> plusIcon [
	
	^SpaceInterface createEntityIcon
]

{ #category : #compiling }
DefaultAttributesSetter class >> silentlyDefineSetterMethod: attributName ofClass: aClass protocol: protocol [
	"Build the setter accessor method code.

ex: self defineSetterMethod: 'truc' ofClass: Agent protocol: 'accessing'  		
then, the code will be:
truc: anObject
	''Setter accessor of attribute truc''
	truc := anObject

attributName = <String> 
aClass = <Class> 
protocol = <String> "
	
	| code |
	code := (attributName , ': anObject' , '\	"Setter accessor of attribute '
		, attributName , '. \' , Cormas automaticCommentString , '  "\	' ,
			attributName , ' := anObject') withCRs.
	aClass
		compile: code
		classified: protocol asString
		notifying: nil
]

{ #category : #compiling }
DefaultAttributesSetter class >> silentlyDefineSetterMethodWithObserverNotification: attributName ofClass: aClass protocol: protocol [
	"Build the setter accessor method code and adds a 'self changed' command to notify the oberservers when changed.

ex: self defineSetterMethod: 'truc' ofClass: Agent protocol: 'accessing'  		
then, the code will be:
truc: anObject
	''Setter accessor of attribute truc''
	truc := anObject

attributName = <String> 
aClass = <Class> 
protocol = <String> "
	
	| code |
	code := (attributName , ': anObject' , '\	"Setter accessor of attribute '
		, attributName , '. \' , Cormas automaticCommentString , '  "\	' ,
			attributName , ' = anObject ifTrue:[^nil].   "for optimization"\	' ,
			attributName , ' := anObject.' , '\	self changed') withCRs.
	aClass
		compile: code
		classified: protocol asString
		notifying: nil
]

{ #category : #getAttributes }
DefaultAttributesSetter class >> staticAttributsFromClass: aClass [
	"Return a set containing the static variable names (as string) of aClass and all its super classes until the Cormas entity classes."
	
	| set |
	set := OrderedCollection new.	"Add the class variables"
	set addAll: aClass class instVarNames.	"list addAll: aClass classVarNames."	"ne marche pas !"	"and add attributs superclasses except from Entities"
	set addAll: (self inheritedInstVarNamesForClass: aClass class).
	set
		remove: 'CurrentId'
		ifAbsent: [].
	^set
]

{ #category : #getAttributes }
DefaultAttributesSetter class >> staticAttributsWithAccessorsFromClass: aClass [
	"Return a set containing the static variable names (as string) of aClass and all its super classes until the Cormas entity classes.
!! All attributs without accessors are removed from the set "
	
	| set |
	set := Set new.
	(self staticAttributsFromClass: aClass)
		do:
			[:anAttribut | 
			((aClass class compiledMethodAt: anAttribut asSymbol ifAbsent: [nil]) isNil
				or: [(aClass class compiledMethodAt: (anAttribut , ':') asSymbol ifAbsent: [nil]) isNil])
				ifFalse: [set add: anAttribut asString]].
	^set
]

{ #category : #compiling }
DefaultAttributesSetter class >> transformAsString: defaultValue [
	"return the defaultValue as a string.
	defaultValue: <Number or String or Boolean or Dictionary or Array or Collection>"
	
	| defaultString coll |
	defaultValue isNil ifTrue: [^'nil'].
	defaultValue isString
		ifTrue:
			["((defaultValue findString: 'randomFloat' startingAt: 1) = 1) ifTrue:[^defaultValue].
((defaultValue findString: 'randomInteger' startingAt: 1) = 1) ifTrue:[^defaultValue]."
			^defaultValue printString].
	(defaultValue isKindOf: Boolean) ifTrue: [^defaultValue asString].
	(defaultValue isKindOf: Number) ifTrue: [^defaultValue asString].
	(defaultValue isKindOf: Dictionary)
		ifTrue:
			[defaultValue isEmpty
				ifTrue: [defaultString := defaultValue class name asString , ' new']
				ifFalse: [self halt].
			^defaultString].
	(defaultValue isKindOf: Array)
		ifTrue:
			[defaultString := 'Array withAll: ' , defaultValue asString.
			^defaultString].	"because Array is immutable in VW7.6, cannot write  defaultValue asString !"
	(defaultValue isKindOf: Collection)
		ifTrue:
			[defaultValue isEmpty
				ifTrue: [defaultString := defaultValue class name asString , ' new']
				ifFalse:
					[defaultString := ''.
					coll := defaultValue asString asArrayOfSubstrings asOrderedCollection.
					coll add: 'withAll:' beforeIndex: 2.
					coll do: [:sub | defaultString := defaultString , sub , ' ']].
			^defaultString].
	^defaultValue asString
]

{ #category : #actions }
DefaultAttributesSetter >> _LabelPressed [
	
	
]

{ #category : #'initialize-release' }
DefaultAttributesSetter >> allAttributesList [
	
	^allAttributsList ifNil: [allAttributsList := self getAllAttributesList]
]

{ #category : #accessing }
DefaultAttributesSetter >> allAttributsList: anObject [
	
	allAttributsList := anObject
]

{ #category : #'actions_elementaries' }
DefaultAttributesSetter >> applyNewValue: aClassAttribValue [
	" set a the new value of the attribute of aClassAttribValue.
	The attributes of the existing objects are associated to the new values and the attributes accessors are redefined.
	Note that the default value accessors at class level are not redefined"
	"Compatibility with previous Cormas version: before changing, it tests if the default class method exists otherwise compiles it"
	
	DefaultAttributesSetter
		getDefaultValueOfAttribut: aClassAttribValue targetAttribute
		ofClass: aClassAttribValue targetClass.
	aClassAttribValue setAttributeNewValue.
	(aClassAttribValue currentValue isKindOf: Dictionary)
		ifTrue:
			[^DefaultAttributesSetter
				defineGetterMethod: aClassAttribValue targetAttribute
				ofClass: aClassAttribValue targetClass
				withDefaultDictionary: aClassAttribValue currentValue
				protocol: 'accessing'].
	DefaultAttributesSetter
		defineGetterMethod: aClassAttribValue targetAttribute
		ofClass: aClassAttribValue targetClass
		withDefaultValue: aClassAttribValue currentValue
		protocol: 'accessing'
]

{ #category : #actions }
DefaultAttributesSetter >> applyNewValues [
	" set a the new values of the attributes when user has changed them and has clicked on 'applyNewValues' button.
	The attributes of the existing objects are associated to the new values (InitialValues) and the attributes accessors are redefined:
	Note that the default value accessors at class level are not redefined"
	
	(self classAttribValue_List list
		select: [:defAttrib | defAttrib hasBeenModified])
		do:
			[:aClassAttribValue | 
			aClassAttribValue entityInstances isNil
				ifTrue:
					[aClassAttribValue
						entityInstances:
							(aClassAttribValue targetClass isMeta
								ifTrue:
									[OrderedCollection with: aClassAttribValue targetClass instanceBehavior]
								ifFalse:
									[self cormasModel class = aClassAttribValue targetClass
										ifFalse:
											[self cormasModel allTheEntities: aClassAttribValue targetClass]
										ifTrue: [OrderedCollection with: self cormasModel]])].
			self applyNewValue: aClassAttribValue]
]

{ #category : #actions }
DefaultAttributesSetter >> backToDefaultValues [
	" set a the default values of the attributes when user have clicked on 'Back to Default Values'.
	The attributes of the existing objects are associated to the default values and the attributes accessors are redefined using the default value accessors at class level"
	
	| list |
	list := self classAttribValue_List list.	"(list select: [:defAttrib | defAttrib hasBeenModified])
		do: [:defAttrib | self setDefaultValue: defAttrib]."
	list do: [:defAttrib | self setDefaultValue: defAttrib].	"pour plus de s√©curit√©..."
	self classAttribValue_List list: list
]

{ #category : #accessing }
DefaultAttributesSetter >> classAttribValue_List [
	^ classAttribValue_List
]

{ #category : #aspects }
DefaultAttributesSetter >> classAttribValue_List: anObject [
	
	classAttribValue_List := anObject
]

{ #category : #getParameters }
DefaultAttributesSetter >> classVariablesToNil [
	"get the defaultParameters.
	defaultParameters is an OrderedCollection containing OrderedCollections as following : 
	( index-i : Class ; attributName asSymbol ; defaultValue ) 
	( index-i : Class ; attributName asSymbol ; defaultValue ) ..."
	
	| allClasses attributs defaultParameters |
	allClasses := self cormasModel class allTerminalClasses.
	allClasses addFirst: self cormasModel class.
	defaultParameters := OrderedCollection new.
	allClasses
		do:
			[:aClass | attributs := self class staticAttributsWithAccessorsFromClass: aClass].
	^defaultParameters
]

{ #category : #accessing }
DefaultAttributesSetter >> cormas [
	"Direct acces to the cormas instance"
	
	^Cormas current
]

{ #category : #accessing }
DefaultAttributesSetter >> cormasModel [
	
	^cormasModel
]

{ #category : #accessing }
DefaultAttributesSetter >> cormasModel: anObject [
	
	cormasModel := anObject
]

{ #category : #accessing }
DefaultAttributesSetter >> cormasModelClass [
	
	^self cormasModel class
]

{ #category : #export }
DefaultAttributesSetter >> exportAttributsValues [
	"Save the content of the 'Parameters windows'
exports the class name, the attributes names and the values into a CSV file"
	"sauvegarde"
	
	| file stream |
	file := self chooseCSVfileName.
	file ifNil: [^nil].
	stream := file writeStream.
	stream nextPutAll: 'Class'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: 'Attribute'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: 'Value'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	self classAttribValue_List list
		do:
			[:defAttrib | 
			stream nextPutAll: defAttrib targetClass name.
			stream nextPutAll: DataSaver_Asci separatorAsString.
			stream nextPutAll: defAttrib targetAttribute asString.
			stream nextPutAll: DataSaver_Asci separatorAsString.
			stream nextPutAll: defAttrib currentValue printString.
			stream nextPutAll: DataSaver_Asci separatorAsString.
			stream nextPutAll: '\' withCRs].
	stream close
]

{ #category : #actions }
DefaultAttributesSetter >> finalize [
	
	self applyNewValues.
	self closeAndUnschedule
]

{ #category : #'initialize-release' }
DefaultAttributesSetter >> getAllAttributesList [
	
	| aList defaultParameters cav |
	aList := Array new. "List from VW are changed to Array"
	defaultParameters := self getInitialParametersValues.
	defaultParameters := defaultParameters
		select: [:coll | coll first subclasses isEmpty].
	defaultParameters
		do:
			[:coll | 
			"(coll at: 3) isSymbol ifTrue:[coll at: 3 put: (coll at: 3) printString]."
			cav := CMClassAttributeValue
				newClass: coll first
				attribute: (coll at: 2)
				value: (coll at: 3).
			cav testIfModified.
			aList add: cav].
	self purgeClassAttribValue: aList.
	^aList
]

{ #category : #getParameters }
DefaultAttributesSetter >> getDefaultParametersValues [
	"get the defaultParameters.
	defaultParameters is an OrderedCollection containing OrderedCollections as following : 
	( index-i : Class ; attributName asSymbol ; defaultValue ) 
	( index-i : Class ; attributName asSymbol ; defaultValue ) ..."
	
	| allClasses attributs defaultParameters |
	allClasses := self cormasModel class allTerminalClasses.
	allClasses addFirst: self cormasModel class.
	defaultParameters := OrderedCollection new.
	allClasses
		do:
			[:aClass | 
			attributs := self class staticAttributsWithAccessorsFromClass: aClass.
			defaultParameters
				addAll:
					(self class
						getDefaultValuesForClass: aClass class
						attributs: attributs).
			attributs := self class attributsWithAccessorsFromClass: aClass.
			defaultParameters
				addAll:
					(self class getDefaultValuesForClass: aClass attributs: attributs)].
	^defaultParameters
]

{ #category : #getParameters }
DefaultAttributesSetter >> getInitialParametersValues [
	"get the Initial Parameters.
	initialParameters is an OrderedCollection containing OrderedCollections as following : 
	( index-i : Class ; attributName asSymbol ; initValue ) 
	( index-i : Class ; attributName asSymbol ; initValue ) ..."
	
	| allClasses attributs defaultParameters |
	allClasses := self cormasModel class allTerminalClasses.
	allClasses addFirst: self cormasModel class.
	defaultParameters := OrderedCollection new.
	allClasses
		do:
			[:aClass | 
			attributs := self class staticAttributsWithAccessorsFromClass: aClass.
			defaultParameters
				addAll:
					(self class
						getInitialValuesForClass: aClass class
						attributs: attributs).
			attributs := self class attributsWithAccessorsFromClass: aClass.
			defaultParameters
				addAll:
					(self class getInitialValuesForClass: aClass attributs: attributs)].
	^defaultParameters
]

{ #category : #accessing }
DefaultAttributesSetter >> hiddenParametersInterface [
	
	^hiddenParametersInterface
]

{ #category : #accessing }
DefaultAttributesSetter >> hiddenParametersInterface: anObject [
	
	hiddenParametersInterface := anObject
]

{ #category : #'initialize-release' }
DefaultAttributesSetter >> init [
	
	self initFull.
	"self removeHiddenAttributes"
]

{ #category : #'initialize-release' }
DefaultAttributesSetter >> initFull [
	
	self classAttribValue_List: self allAttributesList copy.
	super initialize
]

{ #category : #accessing }
DefaultAttributesSetter >> listOfDefaultAttributes [
	
	^self classAttribValue_List listHolder value
]

{ #category : #accessing }
DefaultAttributesSetter >> modifiedAttribute [
	
	^self classAttribValue_List list
		select: [:defAttrib | defAttrib hasBeenModified]
]

{ #category : #getParameters }
DefaultAttributesSetter >> parametersForReInitialization [
	"return a list of ClassAttributeValues containg all the parameters, without the Entity instances' attributs"

	| allClasses parameters attributs |
	allClasses := self cormasModel class allTerminalClasses.
	allClasses addFirst: self cormasModel class.
	parameters := OrderedCollection new.
	allClasses
		do: [ :aClass | 
			(aClass = self cormasModel class
				or: [ aClass = self cormasModel class cellClass ])
				ifTrue: [ attributs := self class attributsWithAccessorsFromClass: aClass.
					attributs
						do: [ :attrib | 
							parameters
								add:
									(CMClassAttributeValue
										newClass: aClass
										attribute: attrib asSymbol
										value: nil) ] ].
			attributs := self class
				staticAttributsWithAccessorsFromClass: aClass.
			attributs
				do: [ :attrib | 
					parameters
						add:
							(CMClassAttributeValue
								newClass: aClass class
								attribute: attrib asSymbol
								value: nil) ] ].
	^ parameters
]

{ #category : #getParameters }
DefaultAttributesSetter >> parametersWithAccessors [
	"return a list of ClassAttributeValues containg all the parameters."

	| allClasses parameters attributs |
	allClasses := self cormasModel class allTerminalClasses.
	allClasses addFirst: self cormasModel class.
	parameters := OrderedCollection new.
	allClasses
		do: [ :aClass | 
			attributs := self class attributsWithAccessorsFromClass: aClass.
			attributs
				do: [ :attrib | 
					parameters
						add:
							(CMClassAttributeValue
								newClass: aClass
								attribute: attrib asSymbol
								value: nil) ].
			attributs := self class
				staticAttributsWithAccessorsFromClass: aClass.
			attributs
				do: [ :attrib | 
					parameters
						add:
							(CMClassAttributeValue
								newClass: aClass class
								attribute: attrib asSymbol
								value: nil) ] ].
	^ parameters
]

{ #category : #getParameters }
DefaultAttributesSetter >> purgeClassAttribValue: aList [
	"Removes elements of aList (ClassAttributeValues of Entities) that are not Number, Boolean, String, Symbol or Class"
	
	aList
		removeAllSuchThat:
			[:defaultAttrib | 
			defaultAttrib currentValue respondsToArithmetic not
				and:
					[(defaultAttrib currentValue class inheritsFrom: Boolean) not
						and:
							[(defaultAttrib currentValue class inheritsFrom: String) not
								and:
									[defaultAttrib currentValue isBehavior not
										and: [(defaultAttrib currentValue class inheritsFrom: Array) not]]]]]
]

{ #category : #actions }
DefaultAttributesSetter >> reApplyNewValues [
	" set a the new values of the attributes whitout compiling the getter accessors"
	
	| aList |
	aList := self classAttribValue_List
		select:
			[:defAttrib | 
			defAttrib hasBeenModified
				or: [defAttrib targetClass = self cormasModel class]].
	aList do: [:aClassAttribValue | aClassAttribValue setAttributeNewValue]
]

{ #category : #actions }
DefaultAttributesSetter >> removeAttributeName: attributSymbol fromClassOrInstance: aClassOrInstance [
	"returns a list of ClassAttributeValues of Entities that can be easily modified by user interface.
It means that the attributes must have both accessors available (setter & getter), and that they are Number, Boolean, String, Symbol or Class"
	
	self classAttribValue_List listHolder value
		removeAllSuchThat:
			[:aClassAttributValue | 
			aClassAttributValue targetClass = aClassOrInstance class
				and: [aClassAttributValue targetAttribute = attributSymbol]].
	^self classAttribValue_List
]

{ #category : #'initialize-release' }
DefaultAttributesSetter >> resetInitialValue: defAttrib [
	" Set a the initial values of the attributes to re-initialzise a simulation.
	Each attribute is set to nil then reader accessor is called that set the initialValue.
	Note that the default value accessors at class level are not redefined"
	
	self classAttribValue_List list
		do:
			[:defAttrib | 
			"Compatibility with previous Cormas version: before changing, it tests if the default class method exists otherwise compiles it"
			self resetInitialValue: defAttrib]
]

{ #category : #actions }
DefaultAttributesSetter >> resetInitialValues [
	" Set a the initial values of the attributes to re-initialzise a simulation.
	Each attribute is set to nil then reader accessor is called that set the initialValue.
	Note that the default value accessors at class level are not redefined"
	
	self classAttribValue_List list
		do:
			[:defAttrib | 
			"Compatibility with previous Cormas version: before changing, it tests if the default class method exists otherwise compiles it"
			self resetInitialValue: defAttrib]
]

{ #category : #'initialize-release' }
DefaultAttributesSetter >> resetParameters [
	"reset the parameters of the classes of the model to nil, then calls the attribut reader accessors to set the default value"
	
	self parametersForReInitialization
		do: [:cav | cav setAttributeInitialValue]
]

{ #category : #actions }
DefaultAttributesSetter >> saveAsDefaultValues [
	"Save definitively the changed parameters with the Initial value: compiles the attribute reader accessor and compiles the attribute_default method"
	
	| listCAVs |
	listCAVs := self classAttribValue_List list
		select: [:defAttrib | defAttrib hasBeenModified].
	listCAVs isEmpty ifTrue: [^nil].
	self confirmSaveDefaultValues ifFalse: [^nil].
	listCAVs
		do:
			[:aCAV | 
			aCAV compileDefaultValue isNil ifFalse: [aCAV setAttributeNewValue].
			aCAV hasBeenModified: false]
]

{ #category : #aspects }
DefaultAttributesSetter >> selectedRow [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^selectedRow isNil
		ifTrue: [selectedRow := nil asValue]
		ifFalse: [selectedRow]
]

{ #category : #actions }
DefaultAttributesSetter >> selectedRowAttributeAsStringLabelPressed [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined."
	
	| ascSortBlock dscSortBlock sortBlock |
	ascSortBlock := [:x :y | x attributeAsString displayString <= y attributeAsString displayString].
	dscSortBlock := [:x :y | x attributeAsString displayString >= y attributeAsString displayString].
	sortBlock := self classAttribValue_List sortAspect ==
			#selectedRowAttributeAsString
		ifTrue:
			[self classAttribValue_List sortDirection == #asc
				ifTrue:
					[self classAttribValue_List sortDirection: #dsc.
					ascSortBlock]
				ifFalse:
					[self classAttribValue_List sortDirection: #asc.
					dscSortBlock]]
		ifFalse:
			[self classAttribValue_List sortAspect: #selectedRowAttributeAsString.
			self classAttribValue_List sortDirection: #dsc.
			ascSortBlock].
	self classAttribValue_List
		refreshList:
			(SortedCollection
				withAll: self classAttribValue_List list
				sortBlock: sortBlock) asList
]

{ #category : #actions }
DefaultAttributesSetter >> selectedRowClassNameAsStringLabelPressed [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined."
	
	| ascSortBlock dscSortBlock sortBlock |
	ascSortBlock := [:x :y | x classNameAsString displayString <= y classNameAsString displayString].
	dscSortBlock := [:x :y | x classNameAsString displayString >= y classNameAsString displayString].
	sortBlock := self classAttribValue_List sortAspect ==
			#selectedRowClassNameAsString
		ifTrue:
			[self classAttribValue_List sortDirection == #asc
				ifTrue:
					[self classAttribValue_List sortDirection: #dsc.
					ascSortBlock]
				ifFalse:
					[self classAttribValue_List sortDirection: #asc.
					dscSortBlock]]
		ifFalse:
			[self classAttribValue_List sortAspect: #selectedRowClassNameAsString.
			self classAttribValue_List sortDirection: #dsc.
			ascSortBlock].
	self classAttribValue_List
		refreshList:
			(SortedCollection
				withAll: self classAttribValue_List list
				sortBlock: sortBlock) asList
]

{ #category : #actions }
DefaultAttributesSetter >> selectedRowCurrentValueAsStringLabelPressed [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined."
	
	| ascSortBlock dscSortBlock sortBlock |
	ascSortBlock := [:x :y | 
	x currentValueAsString displayString
		<= y currentValueAsString displayString].
	dscSortBlock := [:x :y | 
	x currentValueAsString displayString
		>= y currentValueAsString displayString].
	sortBlock := self classAttribValue_List sortAspect ==
			#selectedRowCurrentValueAsString
		ifTrue:
			[self classAttribValue_List sortDirection == #asc
				ifTrue:
					[self classAttribValue_List sortDirection: #dsc.
					ascSortBlock]
				ifFalse:
					[self classAttribValue_List sortDirection: #asc.
					dscSortBlock]]
		ifFalse:
			[self classAttribValue_List sortAspect: #selectedRowCurrentValueAsString.
			self classAttribValue_List sortDirection: #dsc.
			ascSortBlock].
	self classAttribValue_List
		refreshList:
			(SortedCollection
				withAll: self classAttribValue_List list
				sortBlock: sortBlock) asList
]

{ #category : #actions }
DefaultAttributesSetter >> selectedRowCurrentValueLabelPressed [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined."
	
	| ascSortBlock dscSortBlock sortBlock |
	ascSortBlock := [:x :y | x currentValue displayString <= y currentValue displayString].
	dscSortBlock := [:x :y | x currentValue displayString >= y currentValue displayString].
	sortBlock := self classAttribValue_List sortAspect ==
			#selectedRowCurrentValue
		ifTrue:
			[self classAttribValue_List sortDirection == #asc
				ifTrue:
					[self classAttribValue_List sortDirection: #dsc.
					ascSortBlock]
				ifFalse:
					[self classAttribValue_List sortDirection: #asc.
					dscSortBlock]]
		ifFalse:
			[self classAttribValue_List sortAspect: #selectedRowCurrentValue.
			self classAttribValue_List sortDirection: #dsc.
			ascSortBlock].
	self classAttribValue_List
		refreshList:
			(SortedCollection
				withAll: self classAttribValue_List list
				sortBlock: sortBlock) asList
]

{ #category : #'actions_elementaries' }
DefaultAttributesSetter >> setDefaultValue: aClassAttribValue [
	" set a the default value of the attribute into aClassAttribValue .
	The attributes of the existing objects are associated to the default values and the attributes accessors are redefined using the default value accessors at class level"
	
	| defaultValue |
	defaultValue := DefaultAttributesSetter
		getDefaultValueOfAttribut: aClassAttribValue targetAttribute
		ofClass: aClassAttribValue targetClass.
	(defaultValue isKindOf: Dictionary)
		ifTrue: [defaultValue isEmpty ifFalse: [^self]].
	DefaultAttributesSetter
		defineGetterMethod: aClassAttribValue targetAttribute
		ofClass: aClassAttribValue targetClass
		withDefaultValue: defaultValue
		protocol: 'accessing'.
	aClassAttribValue currentValue: defaultValue.	"aClassAttribValue setAttributInitialValue."
	aClassAttribValue hasBeenModified: false.
	aClassAttribValue setAttributeNewValue
]

{ #category : #actions }
DefaultAttributesSetter >> setDefaultValuesAndApply [
	" set a the default values of the attributes when user have clicked on 'Back to Default Values'.
	The attributes of the existing objects are associated to the default values and the attributes accessors are redefined using the default value accessors at class level"
	
	| list |
	list := self classAttribValue_List list.	"(list select: [:defAttrib | defAttrib hasBeenModified])
		do: [:defAttrib | self setDefaultValue: defAttrib]."
	list do: [:defAttrib | self setDefaultValue: defAttrib].	"pour plus de s√©curit√©..."
	self classAttribValue_List list: list
]

{ #category : #accessing }
DefaultAttributesSetter >> simManager [
	
	^self cormasModel simManager
]
