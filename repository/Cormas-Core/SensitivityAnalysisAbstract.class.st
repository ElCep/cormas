"
StandardAnalysis: This analysis is usefull for stochastic model.
Starting from identical initial conditions and from identical parameters' values, N simulations are repeated.
The selected probes are stored as time series, and the mean values of the probes are saved at each time step.

Instance Variables:
	fileFormat	<ValueHolder>	description of fileFormat
	finalStep	<ValueHolder>	description of finalStep
	fixRandomSeed	<ValueHolder>	description of fixRandomSeed
	listControle	<SelectionInList>	description of listControle
	listInit	<SelectionInList>	description of listInit
	listProbes	<MultiSelectionInList>	description of listProbes
	nbOfRepeat	<ValueHolder>	description of nbOfRepeat
	probesFormat	<ValueHolder>	description of probesFormat
	randomSeed	<ValueHolder>	description of randomSeed
	saveAllSim	<ValueHolder>	description of saveAllSim


"
Class {
	#name : #SensitivityAnalysisAbstract,
	#superclass : #DefaultAttributesSetter,
	#instVars : [
		'probeFormat',
		'listControle',
		'fixRandomSeed',
		'listProbes',
		'randomSeed',
		'nbOfRepeat',
		'listInit',
		'fileFormat',
		'finalStep',
		'releaseRandomSeed',
		'cormas',
		'simProgress',
		'analysisProgress',
		'displaySimNumber',
		'simNumero',
		'dataSaver',
		'sumTimeSeriesProbes',
		'averagePeriod',
		'periodField',
		'runSilently',
		'filesExist',
		'process',
		'isAnalysisEnded'
	],
	#category : #'Cormas-Core-Others'
}

{ #category : #help }
SensitivityAnalysisAbstract class >> asText [
	
	^self name asString asText
]

{ #category : #icon }
SensitivityAnalysisAbstract class >> directoryIcon [
	
	^OpaqueImage
		figure: ToolbarIconLibrary folderCreate20x20
		shape: ToolbarIconLibrary folderCreate20x20mask
]

{ #category : #resources }
SensitivityAnalysisAbstract class >> fileFormatChooser [
	"Tools.MenuEditor new openOnClass: self andSelector: #fileFormatChooser"
	
	<resource: #menu>
	^#(Menu #(#(MenuItem 
		#rawLabel: #(UserMessage 
			#key: #asciiFile 
			#defaultString: 'CSV file') 
		#value: #csv) #(MenuItem 
		#rawLabel: #(UserMessage 
			#key: #excelFile 
			#defaultString: 'Excel file') 
		#value: #excel) #(MenuItem 
		#rawLabel: 'MSAccess' 
		#value: #access)) #(3) nil) decodeAsLiteralArray
]

{ #category : #resources }
SensitivityAnalysisAbstract class >> menuBar [
	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"
	
	<resource: #menu>
	^#(Menu #(#(MenuItem 
		#rawLabel: 'File' 
		#submenu: #(Menu #(#(MenuItem 
			#rawLabel: 'Save analysis settings' 
			#value: #chooseAndSaveSettings) #(MenuItem 
			#rawLabel: 'Load analysis settings' 
			#value: #loadAnalysisSettings)) #(2) nil)) #(MenuItem 
		#rawLabel: 'help' 
		#submenu: #(Menu #(#(MenuItem 
			#rawLabel: 'Purpose' 
			#value: #mainHelp)) #(1) nil))) #(2) nil) decodeAsLiteralArray
]

{ #category : #resources }
SensitivityAnalysisAbstract class >> menuProbeFormat [
	"Tools.MenuEditor new openOnClass: self andSelector: #menuProbeFormat"
	
	<resource: #menu>
	^#(Menu #(#(MenuItem 
		#rawLabel: #(UserMessage 
			#key: #asciiFile 
			#defaultString: 'help') 
		#value: #help)) #(1) nil) decodeAsLiteralArray
]

{ #category : #resources }
SensitivityAnalysisAbstract class >> pauseIcon [
	
	^Cormas pauseIcon
]

{ #category : #resources }
SensitivityAnalysisAbstract class >> runIcon [
	
	^Cormas runIcon
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> analysisProgress [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^analysisProgress isNil
		ifTrue: [analysisProgress := 0 asValue]
		ifFalse: [analysisProgress]
]

{ #category : #save }
SensitivityAnalysisAbstract >> analysisSettingsFile [
	
	^'analysisSettings.csv'
]

{ #category : #'actions_buttons' }
SensitivityAnalysisAbstract >> apply [
	
	self checkSettings = self ifFalse: [^nil].
	self closeAndUnschedule.
	self openRunAnalysisWindow.
	self closeGraphicInterfaces
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> averagePeriod [
	
	^averagePeriod
		ifNil:
			[averagePeriod := List
				with: 0
				with: self finalStep value]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> averagePeriod: anObject [
	
	averagePeriod := anObject
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> changedFinalStep [
	
	self cormas cycle value: self finalStep value
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> changedInitMethod [
	
	self cormasModel activeInit: self initMethod value asSymbol
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> changedListProbes [
	
	self cormasModelClass activeProbes: OrderedCollection new.
	self listProbes selections
		do:
			[:s | self cormasModelClass activeProbes add: (s tokensBasedOn: $>) last asSymbol]
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> changedProbeFormat [
	
	| aMultiSelectionSequenceView minMax |
	(self probeFormat selections includes: 'average on period...')
		ifFalse:
			[averagePeriod := nil.
			(self builder componentAt: #periodLabel) beInvisible.
			^(self builder componentAt: #periodField) beInvisible].
	aMultiSelectionSequenceView := self probeFormat listHolder dependents
		detect: [:dep | dep isKindOf: MultiSelectionSequenceView]
		ifNone: [^nil].
	(aMultiSelectionSequenceView sequence
		at: aMultiSelectionSequenceView lastSelectionIndex) =
			'average on period...' ifFalse: [^nil].
	self finalStep value <= 0
		ifTrue:
			[self cormas warn:
					'Please, enter a final step to set the simulation duration'.
			^aMultiSelectionSequenceView
				retractSelectionIndex: aMultiSelectionSequenceView lastSelectionIndex].
	minMax := OneParameterWindow new.
	minMax openInterface: #periodDialog.
	minMax accept value
		ifFalse:
			[^aMultiSelectionSequenceView
				retractSelectionIndex: aMultiSelectionSequenceView lastSelectionIndex].
	averagePeriod := List
		with: minMax parameterInitialValue value
		with: minMax parameterFinalValue value.
	averagePeriod first < averagePeriod last
		ifFalse:
			[self cormas warn: 'Please, set a final step upper than the inital step'.
			^self changedProbeFormat].
	averagePeriod first < 0
		ifTrue:
			[self cormas warn: 'Please, set a positive inital step value'.
			^self changedProbeFormat].
	averagePeriod last > self timeSteps size
		ifTrue:
			[self cormas
				warn:
					'Final step is upper than the simulation duration<n>Final step will be setted to: <1s>'
				with: self finalStep value asString.
			averagePeriod
				at: 2
				put: self finalStep value].
	self periodField
		value:
			'[' , averagePeriod first asString , ' ' , averagePeriod last asString ,
					']'.
	(self builder componentAt: #periodLabel) beVisible.
	(self builder componentAt: #periodField) beVisible
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> changedRandomSeed [
	
	| wrapper |
	wrapper := self builder componentAt: #randomSeed.
	fixRandomSeed value
		ifTrue:
			[wrapper enable.
			(self builder componentAt: #releaseRandomSeed) enable]
		ifFalse:
			[wrapper disable.
			(self builder componentAt: #releaseRandomSeed) disable.
			releaseRandomSeed value: false]
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> changedStepMethod [
	
	self cormasModel activeControl: self stepMethod value asSymbol
]

{ #category : #'actions_buttons' }
SensitivityAnalysisAbstract >> checkSettings [
	"return self if ok"
	
	self subclassResponsibility
]

{ #category : #save }
SensitivityAnalysisAbstract >> chooseAndSaveSettings [
	"Save the content of the 'Parameters windows'
exports the class name, the attributes names and the values into a CSV file"
	
	| fileName |
	self checkSettings = self ifFalse: [^nil].
	fileName := Dialog
		requestNewFileName: 'Save as'
		default:
			((Cormas dataPath: self cormasModelClass name) construct:
					'analysisSettings.csv').
	fileName = '' ifTrue: [^nil].
	self saveSettingsOnFile: fileName asFilename
]

{ #category : #'actions_buttons' }
SensitivityAnalysisAbstract >> close [
	
	^self closeAndUnschedule
]

{ #category : #actions }
SensitivityAnalysisAbstract >> closeGraphicInterfaces [
	"((self cormas spaceInterfaces isNil or: [self cormas spaceInterfaces isEmpty])
		and: [self cormas displayChartsWin isNil or:[self cormas displayChartsWin isEmpty]]) ifTrue: [^nil]."
	
	self cormas hasGraphicInterfaces ifFalse: [^self].
	(self cormas confirm:
			'In order to speed up the analysis, Graphic Interfaces should be closed.
	Do you want Cormas to close these windows?')
		ifTrue: [self cormas closeGraphicWindows]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> cormas [
	
	^cormas ifNil: [cormas := self cormasModel cormas]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> cormas: aCormas [
	
	cormas := aCormas.
	cormas exportPlaybackLog.
	cormas useExternalVisualization
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> dataSaver [
	
	^dataSaver ifNil: [dataSaver := DataSaver_Asci newWith: cormasModel]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> dataSaver: anObject [
	
	dataSaver := anObject
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> defaultDirectoryName [
	
	self subclassResponsibility
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> displayAnalysisDuration: duration [
	"display on th Transcript, the duration time of the complete analysis"
	
	| txt |
	txt := '
The current analysis was run in ' , duration printString , ' milliseconds'.
	duration > 1000
		ifTrue:
			[| dur |
			txt := txt , ', ie. '.
			dur := Time fromSeconds: duration / 1000.
			txt := txt , dur hours printString , ' h: ' , dur minutes printString ,
					' m: ' , dur seconds asFloat printString , ' s.'].
	Transcript print: txt
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> displaySimNumber [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^displaySimNumber isNil
		ifTrue: [displaySimNumber := String new asValue]
		ifFalse: [displaySimNumber]
]

{ #category : #'actions_buttons' }
SensitivityAnalysisAbstract >> endAnalysis [
	
	| msg |
	isAnalysisEnded := true.
	self simNumero: self simNumero - 1.
	msg := 'Analysis ended.\ \Output files have been saved into :\' withCRs.
	msg := msg , self dataSaver directory asString.
	msg := msg
		,
			('\\Information on current analysis are stored into '
				, self analysisSettingsFile , ' file.\') withCRs.
	self runSilently
		ifFalse:
			[(dataSaver isKindOf: DataSaver_Excel)
				ifTrue:
					[msg := msg , '\\            Open Excel files ? ' withCRs.
					(Dialog confirm: msg) ifTrue: [dataSaver displayFiles].
					dataSaver saveAndRelease]
				ifFalse: [Dialog warn: msg]].	"Cormas println: msg."
	self backToDefaultValues
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> fileFormat [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^fileFormat isNil
		ifTrue: [fileFormat := #csv asValue]
		ifFalse: [fileFormat]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> fileFormat: anObject [
	
	^fileFormat := anObject
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> filesExist [
	
	^filesExist ifNil: [filesExist := false]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> filesExist: anObject [
	
	filesExist := anObject
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> finalStep [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^finalStep isNil
		ifTrue: [finalStep := 0 asValue]
		ifFalse: [finalStep]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> finalStep: anObject [
	
	^finalStep := anObject
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> fixRandomSeed: anObject [
	
	^fixRandomSeed := anObject
]

{ #category : #save }
SensitivityAnalysisAbstract >> getFileNames [
	"'return the names (string) of the files to be saved (or already saved)"
	
	| set |
	set := Set new.
	dataSaver ifNil: [^set].
	self dataSaver probes keys
		do:
			[:key | 
			(self probeFormat selections includes: 'time series')
				ifTrue:
					[set add: (dataSaver getTimeSerieFilenameOfProbe: key asString)].
			(self probeFormat selections includes: 'last value')
				ifTrue:
					[set add: (dataSaver getLastValueFilenameOfProbe: key asString)].
			(self probeFormat selections includes: 'average per simulation')
				ifTrue:
					[set add: (dataSaver getSimAverageFilenameOfProbe: key asString)].
			(self probeFormat selections includes: 'average on period...')
				ifTrue:
					[set add: (dataSaver getPeriodAverageFilenameOfProbe: key asString)].
			(self probeFormat selections includes: 'averaged over repetitions')
				ifTrue:
					[set add: (dataSaver getAveragedTimeSeriesFilenameOfProbe: key asString)]].
	^set
]

{ #category : #save }
SensitivityAnalysisAbstract >> globalDataAsDictionary [
	"return a dictionary of the data: probe name as key and values as collection:
<Dictionary> simple :
	[ #attribut1 (1 3 0 99 )
	  #attribut2 (23 4 8 1) ...... ]"
	
	self cormasModel data isEmpty
		ifTrue: [^self listProbes list]
		ifFalse: [^self cormasModel data at: self cormasModelClass name]	"	aValue := (selectedClass perform: ((probes at: index)
							tokensBasedOn: $>) last asSymbol) asFloat."
]

{ #category : #testing }
SensitivityAnalysisAbstract >> hasAlreadySavedTheFiles [
	"answer if saved files of a previous analysis exists"
	
	| desiredFiles |
	desiredFiles := self getFileNames.
	desiredFiles isEmpty ifTrue: [^false].
	^desiredFiles
		allSatisfy:
			[:selector | self dataSaver directory directoryContents includes: selector]
]

{ #category : #help }
SensitivityAnalysisAbstract >> help [
	
	| text |
	self probeFormat selections isEmpty ifTrue: [^nil].
	text := 'Help: \ \' withCRs asText emphasizeAllWith: #bold.
	self probeFormat selections
		do:
			[:f | 
			text := text
				,
					((f , ': \') asText emphasizeAllWith:
							#(#bold #italic #color #-> #ColorValue #red)) asText.
			f = 'time series'
				ifTrue:
					[text := text ,
							'Save each selected probe as time serie values for each simulation \ \'].
			f = 'average per simulation'
				ifTrue:
					[text := text ,
							'Save each selected probe as average value per simulation \ \'].
			f = 'average on period...'
				ifTrue:
					[text := text ,
							'Save each selected probe as time serie values over a given period (between step1 and step2) \ \'].
			f = 'averaged over repetitions'
				ifTrue:
					[text := text ,
							'Save each selected probe as time serie averaged over the repetition.
Each stored value at time T is the average of the probe value at T over the X repetions of the parameters set. \ \']].
	self cormas warn: text withCRs asText
]

{ #category : #'initialize-release' }
SensitivityAnalysisAbstract >> init [
	super init.
	self simNumero: 0.
	nbOfRepeat := 0 asValue.
	randomSeed := Cormas seed asValue.
	fixRandomSeed := false asValue.
	fixRandomSeed onChangeSend: #changedRandomSeed to: self.
	self listProbes.
	listProbes selectionIndexHolder
		onChangeSend: #changedListProbes
		to: self.
	self initProbes.
	self initProbeFormat.
	self fileFormat value: self fileFormat value.
	self initFinalStep.
	finalStep onChangeSend: #changedFinalStep to: self.
	self flag:#TODO.
	"on ne va qd meme pas garder toutes les simu sur le disque, non ?
	Non, il faudrait proposer de les virer lorsqu on ferme le modele"
	self simManager enableBackward: false
]

{ #category : #save }
SensitivityAnalysisAbstract >> initFiles [
	"'time series' ; 'last value' ; 'average per simulation' ;  'average on period...' ;  'averaged over repetitions' ."
	"self dataSaver createExcelConnexion."
	
	self filesExist ifTrue: [^nil].
	(self probeFormat selections includes: 'time series')
		ifTrue: [dataSaver prepareTimeSeriesFiles].
	(self probeFormat selections includes: 'last value')
		ifTrue: [dataSaver prepareLastValueFiles].
	(self probeFormat selections includes: 'average per simulation')
		ifTrue: [dataSaver prepareSimAverageFiles].
	(self probeFormat selections includes: 'average on period...')
		ifTrue: [dataSaver preparePeriodAverageFiles: self averagePeriod].
	(self probeFormat selections includes: 'averaged over repetitions')
		ifTrue: [dataSaver prepareAveragedTimeSeriesFiles]
]

{ #category : #'initialize-release' }
SensitivityAnalysisAbstract >> initFinalStep [
	
	self cormas ifNil: [^self finalStep value: 0].
	self finalStep value = self cormas cycle value
		ifFalse:
			[self cormas cycle value > 0
				ifTrue: [self finalStep value: self cormas cycle value]]
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> initNextSimulation [
	"Incrementes simNumero by 1.
	If not in a Repeat loop, it updates the values of the attributs of 
	the model (CormasModel) and initialize the model. Then updates 
	the 	values of the attributs of the entities"
	
	self subclassResponsibility
]

{ #category : #'initialize-release' }
SensitivityAnalysisAbstract >> initProbeFormat [
	"	#rawLabel: 'all steps values' 
				#value: #allStepsValues ) 
			#(#{UI.MenuItem} 
				#rawLabel: 'simulation average' 
				#value: #simulationAverage ) 
			#(#{UI.MenuItem} 
				#rawLabel: 'average on periode...' 
				#value: #averageOnPeriode ) "
	
	| initialList |
	initialList := List new.
	initialList
		add: 'time series';
		add: 'last value';
		add: 'average per simulation';
		add: 'average on period...';
		add: 'averaged over repetitions'.
	self probeFormat list: initialList.
	self probeFormat selectionIndexHolder value: (Set with: 1).
	probeFormat selectionIndexHolder onChangeSend: #changedProbeFormat to:
			self
]

{ #category : #'initialize-release' }
SensitivityAnalysisAbstract >> initProbes [
	
	| initialList aSet i |
	initialList := List new.
	aSet := Set new.
	i := 0.
	self cormasModelClass probes
		do:
			[:p | 
			i := i + 1.
			initialList add: self cormasModelClass name asString , '>>' , p asString.
			(self cormasModelClass activeProbes includes: p) ifTrue: [aSet add: i]].	"(self cormasModel allClasses asSortedCollection: [:cl1 :cl2 | cl1 name < cl2 name]) do: 
			[:c | 
			(c probes isEmpty or:[c isAbstract]) ifFalse: 
					[initialList add: self class separator.
					i := i + 1.
					c probes do: 
							[:p | 
							i := i + 1.
							initialList add: c name asString , '>>' , p asString.
							(c activeProbes includes: p) ifTrue: [aSet add: i]]]]."
	self listProbes list: initialList.
	self listProbes selectionIndexHolder value: aSet
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> initRandomSeed [
	
	self isRandomSeedFixed value
		ifTrue: [Cormas randomSeed: self randomSeed value]
		ifFalse: [Cormas initRandomSeed]
]

{ #category : #'initialize-release' }
SensitivityAnalysisAbstract >> initRunWindow [
	
	self simNumero: 0.
	self simProgress value: 0.
	self analysisProgress value: 0.
	self sumTimeSeriesProbes: nil.
	self dataSaver: nil
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> initSimulation [
	
	self cormasModel defaultAttributesSetter: self.
	self cormasModel initSimulation
]

{ #category : #actions }
SensitivityAnalysisAbstract >> initializeAnalysis [
	
	self finalStep value > 0
		ifFalse:
			[^Dialog warn:
					'Please, enter a final step to set the duration of each simulation'].
	dataSaver isNil
		ifTrue:
			[self cormas
				warn:
					'All the output files will be saved in a single folder.\Please, create this folder ...'
						withCRs.
			self prepareFiles ifNil: [^nil]].
	self analysisProgress value: 0.
	self saveSettings
]

{ #category : #testing }
SensitivityAnalysisAbstract >> isAnalysisEnded [
	
	^isAnalysisEnded ifNil: [isAnalysisEnded := false]
]

{ #category : #testing }
SensitivityAnalysisAbstract >> isLastSimOfRepeat [
	"answer if the current simulation is the last sim of a repeat loop"
	
	self nbOfRepeat value < 2 ifTrue: [^true].
	^(self simNumero / self nbOfRepeat value) isInteger
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> isRandomSeedFixed [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^fixRandomSeed isNil
		ifTrue: [fixRandomSeed := false asValue]
		ifFalse: [fixRandomSeed]
]

{ #category : #testing }
SensitivityAnalysisAbstract >> isRepeating [
	"answer if the current simulation is into a repeat loop"
	
	^((self simNumero - 1) / (self nbOfRepeat value max: 1)) isInteger not
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> keepOrReleaseRandomSeed [
	
	self releaseRandomSeed value ifTrue: [Cormas initRandomSeed]
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> listControle [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^listControle isNil
		ifTrue: [listControle := SelectionInList new]
		ifFalse: [listControle]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> listControle: anObject [
	
	^listControle := anObject
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> listInit [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^listInit isNil
		ifTrue: [listInit := SelectionInList new]
		ifFalse: [listInit]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> listInit: anObject [
	
	^listInit := anObject
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> listProbes [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^listProbes isNil
		ifTrue: [listProbes := MultiSelectionInList new]
		ifFalse: [listProbes]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> listProbes: anObject [
	
	^listProbes := anObject
]

{ #category : #save }
SensitivityAnalysisAbstract >> loadAnalysisSettings [
	
	| fileName fileContent aLine |
	fileName := Dialog
		requestFileName: 'Select a CSV file'
		default:
			((Cormas dataPath: self cormasModel class name) construct:
					'analysisSettings.csv').
	fileName = '' ifTrue: [^nil].
	fileName := fileName asFilename.
	fileContent := Cormas
		readMatrix: fileName
		sep: DataSaver_Asci separator.
	fileContent removeFirst.
	fileContent removeAllSuchThat: [:line | line isEmpty].
	aLine := fileContent
		detect: [:line | line first = 'Repetitions']
		ifNone: [nil].
	aLine isNil
		ifFalse:
			[self nbOfRepeat value: aLine last.
			fileContent remove: aLine].
	aLine := fileContent detect: [:line | line first = #isRandomSeedFixed].
	aLine last = 'no'
		ifTrue: [self isRandomSeedFixed value: false]
		ifFalse:
			[self isRandomSeedFixed value: true.
			self randomSeed value: aLine last].
	fileContent remove: aLine.
	aLine := fileContent detect: [:line | line first = 'releaseRandomSeed'].
	self releaseRandomSeed value: aLine last.
	fileContent remove: aLine.
	aLine := fileContent detect: [:line | line first = 'initMethod'].
	self initMethod value: aLine last.
	fileContent remove: aLine.
	aLine := fileContent detect: [:line | line first = 'stepMethod'].
	self stepMethod value: aLine last.
	fileContent remove: aLine.
	aLine := fileContent detect: [:line | line first = 'finalStep'].
	self finalStep value: aLine last.
	fileContent remove: aLine.
	self backToDefaultValues.	"set the values of attributes"
	self setCAVfrom: fileContent.	"refresh"
	self classAttribValue_List list: self classAttribValue_List list
]

{ #category : #help }
SensitivityAnalysisAbstract >> mainHelp [
	"Open a SimpleHelp on the mainHelpText
	self new mainHelp"
	
	(SimpleHelp helpString: self mainHelpText withCRs) open
]

{ #category : #help }
SensitivityAnalysisAbstract >> mainHelpText [
	
	^('Purpose of ' , self class asText , ': \ \') withCRs asText
		emphasizeAllWith: #bold
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> nbOfRepeat [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^nbOfRepeat isNil
		ifTrue: [nbOfRepeat := 0 asValue]
		ifFalse: [nbOfRepeat]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> nbOfRepeat: anObject [
	
	^nbOfRepeat := anObject
]

{ #category : #actions }
SensitivityAnalysisAbstract >> openRunAnalysisWindow [
	
	self initRunWindow.
	self openInterface: #runAnalysisWindow
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> periodField [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^periodField isNil
		ifTrue: [periodField := String new asValue]
		ifFalse: [periodField]
]

{ #category : #save }
SensitivityAnalysisAbstract >> prepareFiles [
	
	| directory dico |
	directory := self setDirectory.
	directory ifNil: [^nil].
	self fileFormat value = #csv
		ifTrue:
			[dataSaver := DataSaver_Asci newOnFolder: directory model: cormasModel].
	self fileFormat value = #excel
		ifTrue:
			[dataSaver := DataSaver_MultiFilesExcel newOnFolder: directory model:
					cormasModel].
	self fileFormat value = #access ifTrue: [self halt].
	dico := Dictionary new.
	self listProbes selections
		do:
			[:c | 
			dico
				at: (c tokensBasedOn: $>) last asSymbol
				put: nil].
	dataSaver probes: dico.
	self dataSaver timeSteps: self timeSteps.	"'time series' ; 'last value' ; 'average per simulation' ;  'average on period...' ;  'averaged over repetitions' ."
	self filesExist ifTrue: [self filesExist: self hasAlreadySavedTheFiles].
	self initFiles
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> probeFormat [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^probeFormat isNil
		ifTrue: [probeFormat := MultiSelectionInList new]
		ifFalse: [probeFormat]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> probeFormat: anObject [
	
	^probeFormat := anObject
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> randomSeed [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^randomSeed isNil
		ifTrue: [randomSeed := 1 asValue]
		ifFalse: [randomSeed]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> randomSeed: anObject [
	
	^randomSeed := anObject
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> releaseRandomSeed [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^releaseRandomSeed isNil
		ifTrue: [releaseRandomSeed := false asValue]
		ifFalse: [releaseRandomSeed]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> releaseRandomSeed: anObject [
	
	^releaseRandomSeed := anObject
]

{ #category : #'actions_buttons' }
SensitivityAnalysisAbstract >> runAnalysis [
	
	self initializeAnalysis.
	self runCompleteAnalysis
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> runCompleteAnalysis [
	"Run a complete analysis, running X times [#initNextSimulation & #runOneSimulation]"
	
	isAnalysisEnded := false.
	Processor yield.
	process isNil
		ifFalse:
			[process suspendedContext isNil
				ifFalse:
					[process suspendingList isNil
						ifFalse:
							[self simRunButton_Pause: false.
							^process suspend]
						ifTrue:
							[self simRunButton_Pause: true.
							^process resume]]].	"*******************************************************************"	"**********************     RUN  threaded    *********************"
	process := [self runCompleteAnalysis_basic]
		forkAt: Processor userBackgroundPriority.	"  ********************       END LOOP        ********************"	"*******************************************************************"	"The instructions below are, normaly, not called, because #terminate (called on process) will leave this current method"
	self isAnalysisEnded
		ifTrue:
			[process isNil
				ifFalse:
					[process terminate.
					process := nil]]
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> runCompleteAnalysis_basic [
	"Run a complete analysis, running X times [#initNextSimulation & #runOneSimulation]"
	
	| nbSims continue chrono |
	chrono := Time
		millisecondsToRun:
			[nbSims := 1 max: self totalSimNumberWithRepeat.
			continue := true.
			[continue]
				whileTrue:
					[self initNextSimulation isNil
						ifTrue:
							[continue := false.
							self endAnalysis]
						ifFalse:
							[self keepOrReleaseRandomSeed.
							self runOneSimulation.
							self saveData.
							self analysisProgress value: self simNumero / nbSims]]].
	self displayAnalysisDuration: chrono.
	process terminate.
	process := nil
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> runOneSimulation [
	"Main method to run a 1 simulation. The simulation has already been initialized"
	
	self runOneSimulation_Basic
]

{ #category : #simulation }
SensitivityAnalysisAbstract >> runOneSimulation_Basic [
	"Run one simulation step by step.
	Do not display the Duration time on the Transcript.
	Method called from #runSimulation but also from SensitivityAnalysisAbstract #runOneSimulation"
	
	| continue |
	self simProgress value: 0.
	continue := true.
	[continue]
		whileTrue:
			[self simManager currentSimEnded
				ifTrue: [continue := false]
				ifFalse:
					[self cormasModel runStep ifNil: [continue := false].
					self simProgress
						value: self cormasModel timeStep / self finalStep value]	" *********   One Step  ***********"	" *********     Done  ***********"]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> runSilently [
	
	^runSilently ifNil: [runSilently := false]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> runSilently: anObject [
	
	runSilently := anObject
]

{ #category : #save }
SensitivityAnalysisAbstract >> saveAveragedTimeSeriesFiles [
	
	| collProbe averages |
	self globalDataAsDictionary
		keysAndValuesDo:
			[:key :coll | 
			1
				to: coll size
				do:
					[:time | 
					collProbe := self sumTimeSeriesProbes at: key.
					collProbe
						at: time
						put: (collProbe at: time) + (coll at: time)]].
	self isLastSimOfRepeat
		ifTrue:
			[averages := Dictionary new.
			self sumTimeSeriesProbes
				keysAndValuesDo:
					[:key :coll | 
					averages
						at: key
						put:
							(coll collect: [:val | (val / (self nbOfRepeat value max: 1)) asFloat])].
			dataSaver saveAveragedTimeSeriesFiles: averages.
			self sumTimeSeriesProbes: nil]
]

{ #category : #save }
SensitivityAnalysisAbstract >> saveData [
	"'time series' ; 'last value' ; 'average per simulation' ;  'average on period...' ;  'averaged over repetitions' ."
	
	self dataSaver probes: self globalDataAsDictionary.
	self setDataSaverCurrentParameter.
	(self probeFormat selections includes: 'time series')
		ifTrue: [dataSaver updateValuesOfGlobalProbes].
	(self probeFormat selections includes: 'last value')
		ifTrue: [dataSaver updateLastValuesOfGlobalProbes].
	(self probeFormat selections includes: 'average per simulation')
		ifTrue: [dataSaver saveSimAverageFiles].
	(self probeFormat selections includes: 'average on period...')
		ifTrue: [dataSaver savePeriodAverageFiles: self averagePeriod].
	(self probeFormat selections includes: 'averaged over repetitions')
		ifTrue: [self saveAveragedTimeSeriesFiles]
]

{ #category : #save }
SensitivityAnalysisAbstract >> saveSettings [
	"Save the content of the 'Parameters windows'
exports the class name, the attributes names and the values into a CSV file"
	
	self
		saveSettingsOnFile:
			(self dataSaver directory construct: self analysisSettingsFile)
]

{ #category : #save }
SensitivityAnalysisAbstract >> saveSettingsOnFile: aCSVfile [
	"Save the content of the 'Sensitivity Analysis windows' on aCSVfile.
exports the analysis information (except the attributes value) into a CSV file"
	
	| stream |
	stream := aCSVfile writeStream.
	stream nextPutAll: 'Analysis type'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: self class name asString.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	stream nextPutAll: 'Repetitions'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: self nbOfRepeat value printString.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	stream nextPutAll: #isRandomSeedFixed.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	self isRandomSeedFixed value
		ifTrue: [stream nextPutAll: self randomSeed value printString]
		ifFalse: [stream nextPutAll: 'no'].
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	stream nextPutAll: 'releaseRandomSeed'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: self releaseRandomSeed value printString.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	stream nextPutAll: 'initMethod'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: self initMethod value asString.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	stream nextPutAll: 'stepMethod'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: self stepMethod value asString.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	stream nextPutAll: 'finalStep'.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: self finalStep value asString.
	stream nextPutAll: DataSaver_Asci separatorAsString.
	stream nextPutAll: '\' withCRs.
	stream close
]

{ #category : #save }
SensitivityAnalysisAbstract >> setCAVfrom: fileContent [
	
	self subclassResponsibility
]

{ #category : #save }
SensitivityAnalysisAbstract >> setDataSaverCurrentParameter [
	
	self subclassResponsibility
]

{ #category : #save }
SensitivityAnalysisAbstract >> setDirectory [
	
	| directory day defaultName |
	day := Time dateAndTimeNow at: 1.
	defaultName := self defaultDirectoryName , day year printString , '.'
		, day monthIndex printString , '.' , day dayOfMonth printString.
	directory := DataSaver
		requestForDirectory: self cormasModel
		defaultName: defaultName.
	directory ifNil: [^nil].
	directory exists
		ifTrue:
			[self filesExist: true	"will be effectively checked later (when dataSaver will be set)"]
		ifFalse: [directory makeDirectory].
	^directory
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> simNumero [
	
	simNumero ifNil: [self simNumero: 0].
	^simNumero
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> simNumero: aNb [
	
	simNumero := aNb.
	self displaySimNumber
		value: aNb asString , '/' , self totalSimNumberWithRepeat asString
]

{ #category : #aspects }
SensitivityAnalysisAbstract >> simProgress [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^simProgress isNil
		ifTrue: [simProgress := 0 asValue]
		ifFalse: [simProgress]
]

{ #category : #'actions_buttons' }
SensitivityAnalysisAbstract >> simRunButton_Pause: bool [
	"bool = false => display the run button [ I> II ] 
			otherwise, display as [ II ].
	buttonName = <Symbol> =  #run 
	bool = <Bollean>
		run_offIcon   -      runIcon  "
	
	| aLabel |
	bool
		ifFalse: [aLabel := #runIcon]
		ifTrue: [aLabel := #pauseIcon].
	(self builder componentAt: #runButton) isNil
		ifFalse:
			[(self builder componentAt: #runButton) label: (Cormas perform: aLabel)]
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> sumTimeSeriesProbes [
	
	sumTimeSeriesProbes
		ifNil:
			[sumTimeSeriesProbes := Dictionary new.
			self globalDataAsDictionary
				keysDo:
					[:aProbe | 
					sumTimeSeriesProbes
						at: aProbe
						put:
							(List
								new: self timeSteps size
								withAll: 0)]].
	^sumTimeSeriesProbes
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> sumTimeSeriesProbes: anObject [
	
	sumTimeSeriesProbes := anObject
]

{ #category : #save }
SensitivityAnalysisAbstract >> timeSteps [
	"return a collection of number corresponding to the time steps.
ex: (0 1 2 3 4 5 6)"
	
	| coll |
	coll := OrderedCollection new.
	0
		to: self finalStep value
		do: [:i | coll add: i].
	^coll
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> totalSimNumber [
	"return the number of simulations for the analysis, Without multiplying by the repeat number for each parameters set."
	
	| tot |
	tot := 0.
	self parametersToAnalyse do: [:cav | tot := tot + cav nbOfSims].
	^tot
]

{ #category : #accessing }
SensitivityAnalysisAbstract >> totalSimNumberWithRepeat [
	"return the number of simulations for the analysis, multiplying by the repeat number for each parameters set."
	
	| tot |
	tot := self totalSimNumber.
	tot = 0 ifTrue: [^self nbOfRepeat value].
	^tot * (self nbOfRepeat value max: 1)
]
