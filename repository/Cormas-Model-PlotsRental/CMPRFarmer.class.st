Class {
	#name : #CMPRFarmer,
	#superclass : #CMAgentCommLocation,
	#instVars : [
		'plotsOfLand',
		'productivity',
		'cashbox'
	],
	#classVars : [
		'CurrentId'
	],
	#category : #'Cormas-Model-PlotsRental'
}

{ #category : #'pov symbols' }
CMPRFarmer class >> VectorialPOV_PR_Farmer [
"Returns an array containing the settings of a Situated entity vectorial pov symbol in the following order:
(color red) (color green) (color blue) (lineColor red) (lineColor green) (lineColor blue) lineWidth sizeratio position (array of outline vertices) isDistortable."

	^ #(1.0 1.0 0.0 0.0 0.0 0.0 1 1 #center #(0.0 #@ -11.2 9.8 #@ 5.6 -9.8 #@ 5.6 0.0 #@ -11.2) true)
]

{ #category : #'default value' }
CMPRFarmer class >> cashbox_default [
	"Return the default value of attribute #cashbox : 100000.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ 100000
]

{ #category : #'parameter unit' }
CMPRFarmer class >> cashbox_type [
	"Return the type of attribute #cashbox.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ SmallInteger
]

{ #category : #'parameter unit' }
CMPRFarmer class >> cashbox_unit [
	"Return the unit of attribute #cashbox.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ '$'
]

{ #category : #'pov symbols' }
CMPRFarmer class >> defaultColor [
	"Returns the default color (Automatically defined by Cormas)."

 	^ ColorValue yellow
]

{ #category : #image }
CMPRFarmer class >> defaultImage [
	"defaultImage adapted for Cormas versions previous to 2010. Returns a copy of the POV image stored in the povDict of the class at a specifed symbol key"

	^ ((self povDict keys includes: #CMPRFarmer)
		ifTrue: [ self povDict at: #CMPRFarmer ]
		ifFalse: [ super defaultImage ]) copy
]

{ #category : #'default value' }
CMPRFarmer class >> plotsOfLand_default [
	"Return the default value of attribute #plotsOfLand : OrderedCollection new.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ OrderedCollection new
]

{ #category : #'parameter unit' }
CMPRFarmer class >> plotsOfLand_type [
	"Return the type of attribute #plotsOfLand.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ OrderedCollection
]

{ #category : #'default value' }
CMPRFarmer class >> productivity_default [
	"Return the default value of attribute #productivity : 50.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ 50
]

{ #category : #'parameter unit' }
CMPRFarmer class >> productivity_type [
	"Return the type of attribute #productivity.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ SmallInteger
]

{ #category : #'parameter unit' }
CMPRFarmer class >> productivity_unit [
	"Return the unit of attribute #productivity.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ '$'
]

{ #category : #procedures }
CMPRFarmer >> calculateIncome [
	self plotsOfLand
		do: [ :p | 
			p status = #notRent
				ifTrue: [ cashbox := self cashbox + (self productivityOfPlot: p) ].
			p status = #rent
				ifTrue: [ cashbox := self cashbox + 20.
					p farmer
						cashbox: p farmer cashbox + (p farmer productivityOfPlot: p) ] ]
]

{ #category : #msg }
CMPRFarmer >> callFor: aPlot [
	^ self createMsgTopic: #call receiver: nil object: aPlot 
]

{ #category : #accessing }
CMPRFarmer >> cashbox [
	"Getter accessor with initial value = 100000 $. 
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "

	^ cashbox ifNil: [ cashbox := 100000 ]
]

{ #category : #accessing }
CMPRFarmer >> cashbox: aSmallInteger [
	"Setter accessor of attribute cashbox (Unit: $). 
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "

	cashbox := aSmallInteger
]

{ #category : #probes }
CMPRFarmer >> cashboxN [
	^ self cashbox - 100000
]

{ #category : #msg }
CMPRFarmer >> createMsg: aMsgClass topic: aSymbol receiver: anAgent object: anObject [
	| m |
	m := aMsgClass new.
	m
		topic: aSymbol;
		object: anObject;
		sender: self;
		receiver: anAgent.
	^ m
]

{ #category : #msg }
CMPRFarmer >> createMsgTopic: aSymbol receiver: anAgent object: anObject [
	^ self
		createMsg: CMPRMessage
		topic: aSymbol
		receiver: anAgent
		object: anObject 
]

{ #category : #control }
CMPRFarmer >> finalAnswers [
	"Answers to the proposal by selecting the best proposal for each plot, and comparing it with its productivity"

	| proposalsForP bestProposal allProposals produc |
	allProposals := self mailBox select: [ :m | m topic = #proposal ].
	allProposals isEmpty
		ifTrue: [ ^ nil ].
	self plotsOfLand
		do: [ :p | 
			proposalsForP := allProposals
				select: [ :m | m object = p and: [ p status = #notRent ] ].
			bestProposal := Cormas
				elementFrom: proposalsForP
				withMaxValue: #amount.
			bestProposal
				ifNotNil: [ produc := self productivityOfPlot: p.
					bestProposal amount > produc
						ifTrue: [ self
								replyTo: bestProposal
								topic: #finalise
								amount: bestProposal amount.
							proposalsForP remove: bestProposal.
							self mailBox remove: bestProposal ] ].
			proposalsForP
				do:
					[ :msg | self replyTo: msg topic: #sorry amount: msg amount ].
			self mailBox removeAll: proposalsForP ]
]

{ #category : #control }
CMPRFarmer >> initialCalls [
	"For each of his plot, sends an offer to all of his acquaintances"

	self acquaintances
		do: [ :other |  
			self plotsOfLand
				do:
					[ :plot | self sendMessageAsynchronously: ((self callFor: plot) receiver: other) ] ]
]

{ #category : #accessing }
CMPRFarmer >> plotsOfLand [
	"Getter accessor with initial value = OrderedCollection new. 
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "

	^ plotsOfLand ifNil: [ plotsOfLand := OrderedCollection new ]
]

{ #category : #accessing }
CMPRFarmer >> plotsOfLand: aOrderedCollection [
	"Setter accessor of attribute plotsOfLand	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "

	plotsOfLand := aOrderedCollection
]

{ #category : #control }
CMPRFarmer >> processAuctions [
	| winnerAuctions lostAuctions |
	lostAuctions := self mailBox select: [ :m | m topic = #sorry ].
	lostAuctions do: [ :m | self cashbox: self cashbox + m amount ].
	winnerAuctions := self mailBox select: [ :m | m topic = #finalise ].
	winnerAuctions
		do: [ :m | 
			(self plotsOfLand includes: m object)
				ifFalse: [ self rentPlot: m object ] ].
	self resetMailBox
]

{ #category : #control }
CMPRFarmer >> processMessageFromAuctionner [
	"Evaluate each msg received from the Auctioneer, and answer an Accept msg with an amount"

	| proposedPlot potentialIncome prop |
	self mailBox 
		do: [ :m | 
			m topic = #proposal
				ifTrue: [ proposedPlot := m object.
					potentialIncome := self productivityOfPlot: proposedPlot.
					potentialIncome - 1 > self cashbox
						ifTrue: [ prop := self cashbox ]
						ifFalse: [ prop := potentialIncome - 1 ].
					self replyTo: m topic: #accept amount: prop.
					self cashbox: self cashbox - prop ] ].
	self resetMailBox
]

{ #category : #accessing }
CMPRFarmer >> productivity [
	"Getter accessor with initial value = 50 $. 
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "

	^ productivity ifNil: [ productivity := 50 ]
]

{ #category : #accessing }
CMPRFarmer >> productivity: aSmallInteger [
	"Setter accessor of attribute productivity (Unit: $).
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "

	productivity := aSmallInteger
]

{ #category : #procedures }
CMPRFarmer >> productivityOfPlot: aPlot [
	"productivity depends of distance to the house"

	| distance prodPlot |
	distance := 10 * (self patch distanceTo: aPlot).
	distance := distance * distance.
	prodPlot := 30 * (0.1 * self productivity - (1.0e-4 * distance)).
	prodPlot < 0
		ifTrue: [ prodPlot := 0 ]. 
	^ prodPlot
]

{ #category : #control }
CMPRFarmer >> proposals [
	"Answers to the first calls with a price set up on productivity of each plot:"

	| proposedPlot potentialIncome prop calls |
	calls := self mailBox select: [ :m | m topic = #call ].
	calls
		do: [ :msg |  
			proposedPlot := msg object.
			potentialIncome := self productivityOfPlot: proposedPlot.
			potentialIncome - 1 > self cashbox
				ifTrue: [ prop := self cashbox ]
				ifFalse: [ prop := potentialIncome - 1 ].
			self sendProposalTo: msg sender object: proposedPlot amount: prop.
			self cashbox: self cashbox - prop ].
	self mailBox removeAll: calls
]

{ #category : #procedures }
CMPRFarmer >> rentPlot: aPlot [
	aPlot
		farmer: self;
		status: #rent 
]

{ #category : #msg }
CMPRFarmer >> replyTo: msg topic: aTopic amount: anAmount [
	| aReply |
	aReply := self
		createMsgTopic: aTopic
		receiver: msg sender
		object: msg object. 
	aReply amount: anAmount.
	self sendMessageAsynchronously: aReply.
	^ aReply
]

{ #category : #'initialize - release' }
CMPRFarmer >> resetMailBox [
	self mailBox: OrderedCollection new 
]

{ #category : #msg }
CMPRFarmer >> sendProposalTo: aReceiver object: anObject amount: anAmount [
	| mAccept |
	mAccept := self
		createMsgTopic: #proposal
		receiver: aReceiver
		object: anObject. 
	mAccept amount: anAmount.
	self sendMessageAsynchronously: mAccept
]

{ #category : #control }
CMPRFarmer >> updateCashbox [
	self mailBox
		do: [ :m | 
			m topic = #sorry 
				ifTrue: [ self cashbox: self cashbox + m amount ]
				ifFalse: [ m topic = #finalise
						ifTrue: [ self rentPlot: m object ]
						ifFalse: [ self halt ] ] ].
	self calculateIncome
]
